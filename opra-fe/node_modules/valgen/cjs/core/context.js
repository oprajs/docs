"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Context = void 0;
const omit_undefined_js_1 = require("../helpers/omit-undefined.js");
const constants_js_1 = require("./constants.js");
const validation_error_js_1 = require("./validation-error.js");
const VARIABLE_REPLACE_PATTERN = /{{([^}]*)}}/g;
const OPTIONAL_VAR_PATTERN = /^([^?]+)(?:\||(.*))?$/;
class Context {
    constructor(options) {
        this.errors = [];
        Object.assign(this, options);
    }
    fail(rule, message, value, details) {
        const issue = (0, omit_undefined_js_1.omitUndefined)({
            message: message instanceof Error ? message.message : String(message),
            rule: rule.id,
            root: this.root,
            location: this.location,
            context: this.context,
            property: this.property,
            index: this.index,
            label: this.label,
            value,
            ...details
        });
        issue.value = value;
        const onFail = this.onFail || rule[constants_js_1.kOptions].onFail;
        if (onFail) {
            const proto = Object.getPrototypeOf(this);
            const superOnFail = proto.onFail !== onFail ? proto.onFail : undefined;
            const x = onFail(issue, this, superOnFail);
            if (!x)
                return;
            if (typeof x === 'object')
                Object.assign(issue, x);
            else
                issue.message = String(x);
        }
        issue.message = ('' + issue.message)
            .replace(VARIABLE_REPLACE_PATTERN, (x, g) => {
            const m = OPTIONAL_VAR_PATTERN.exec(g);
            if (!m)
                return x;
            const k = m[1];
            let v = issue[k];
            if (!v && m[1] === 'label' && (this.location || this.property))
                v = '`' + (this.location || this.property) + '`';
            if (v != null)
                return v;
            if (m[2])
                return m[2];
            return m[1] === 'label' ? 'Value' : x;
        });
        this.errors.push(issue);
        if (this.errors.length >= (this.maxErrors ?? Infinity))
            throw new validation_error_js_1.ValidationError(this.errors);
    }
    extend(options) {
        const extended = new Context({ onFail: undefined, ...options });
        Object.setPrototypeOf(extended, this);
        delete extended.errors;
        return extended;
    }
}
exports.Context = Context;
