"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lengthMax = exports.lengthMin = exports.extractLength = void 0;
const index_js_1 = require("../core/index.js");
const pipe_js_1 = require("./pipe.js");
const range_js_1 = require("./range.js");
/**
 * Returns length of an Array, String, ArrayBuffer, Buffer or any object with the "length" property.
 * @validator getLength
 */
const extractLength = () => extractLengthRule;
exports.extractLength = extractLength;
const extractLengthRule = (0, index_js_1.validator)('extractLength', function (input, context, _this) {
    if (typeof input === 'string')
        return input.length;
    if (Array.isArray(input))
        return input.length;
    if (input instanceof ArrayBuffer)
        return input.byteLength;
    if (input && typeof input === 'object' && typeof input.length === 'number')
        return input.length;
    if (input && typeof input === 'object' && typeof input.size === 'number')
        return input.size;
    context.fail(_this, `Unable to extract length of {{label}}`, input);
});
/**
 * Checks the length is at least "minValue"
 * @validator lengthMin
 */
const lengthMin = (minValue) => (0, pipe_js_1.allOf)((0, pipe_js_1.pipe)((0, exports.extractLength)(), (0, range_js_1.isGte)(minValue, {
    onFail: () => `The length of {{label}} must be at least ${minValue}`
})));
exports.lengthMin = lengthMin;
/**
 * Checks if the length is at most "maxValue"
 * @validator charLengthMax
 */
const lengthMax = (maxValue) => (0, pipe_js_1.allOf)((0, pipe_js_1.pipe)((0, exports.extractLength)(), (0, range_js_1.isLte)(maxValue, {
    onFail: () => `The length of {{label}} must be at most ${maxValue}`
})));
exports.lengthMax = lengthMax;
