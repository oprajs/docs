"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.range = exports.isLte = exports.isLt = exports.isGte = exports.isGt = void 0;
const index_js_1 = require("../core/index.js");
function isGt(minValue, options) {
    return (0, index_js_1.validator)('isGt', function (input, context, _this) {
        if ((typeof minValue === 'number' || typeof minValue === 'bigint') &&
            (typeof input === 'number' || typeof input === 'bigint') &&
            input > minValue)
            return input;
        if (minValue instanceof Date && input instanceof Date && input > minValue)
            return input;
        if (typeof minValue === 'string' && typeof input === 'string' &&
            (input > minValue ||
                (options?.caseInsensitive && input.toLowerCase() > minValue.toLowerCase())))
            return input;
        context.fail(_this, `{{label}} must be greater than ${(typeof minValue === 'string' ? `"${minValue}"` : minValue)}`, input);
    }, options);
}
exports.isGt = isGt;
function isGte(minValue, options) {
    return (0, index_js_1.validator)('isGte', function (input, context, _this) {
        if ((typeof minValue === 'number' || typeof minValue === 'bigint') &&
            (typeof input === 'number' || typeof input === 'bigint') &&
            input >= minValue)
            return input;
        if (minValue instanceof Date && input instanceof Date && input >= minValue)
            return input;
        if (typeof minValue === 'string' && typeof input === 'string' &&
            (input >= minValue ||
                (options?.caseInsensitive && input.toLowerCase() >= minValue.toLowerCase())))
            return input;
        context.fail(_this, `{{label}} must be greater than or equal to ${(typeof minValue === 'string' ? `"${minValue}"` : minValue)}`, input);
    }, options);
}
exports.isGte = isGte;
function isLt(maxValue, options) {
    return (0, index_js_1.validator)('isLt', function (input, context, _this) {
        if ((typeof maxValue === 'number' || typeof maxValue === 'bigint') &&
            (typeof input === 'number' || typeof input === 'bigint') &&
            input < maxValue)
            return input;
        if (maxValue instanceof Date && input instanceof Date && input < maxValue)
            return input;
        if (typeof maxValue === 'string' && typeof input === 'string' &&
            (input < maxValue ||
                (options?.caseInsensitive && input.toLowerCase() < maxValue.toLowerCase())))
            return input;
        context.fail(_this, `{{label}} must be lover than ${(typeof maxValue === 'string' ? `"${maxValue}"` : maxValue)}`, input);
    }, options);
}
exports.isLt = isLt;
function isLte(maxValue, options) {
    return (0, index_js_1.validator)('isLt', function (input, context, _this) {
        if ((typeof maxValue === 'number' || typeof maxValue === 'bigint') &&
            (typeof input === 'number' || typeof input === 'bigint') &&
            input <= maxValue)
            return input;
        if (maxValue instanceof Date && input instanceof Date && input <= maxValue)
            return input;
        if (typeof maxValue === 'string' && typeof input === 'string' &&
            (input <= maxValue ||
                (options?.caseInsensitive && input.toLowerCase() <= maxValue.toLowerCase())))
            return input;
        context.fail(_this, `{{label}} must be lover than or equal to ${(typeof maxValue === 'string' ? `"${maxValue}"` : maxValue)}`, input);
    }, options);
}
exports.isLte = isLte;
/**
 * Checks if value is between minValue and maxValue
 * @validator range
 */
function range(minValue, maxValue, options) {
    return (0, index_js_1.validator)('range', function (input, context, _this) {
        if ((typeof minValue === 'number' || typeof minValue === 'bigint') &&
            (typeof maxValue === 'number' || typeof maxValue === 'bigint') &&
            (typeof input === 'number' || typeof input === 'bigint') &&
            input >= minValue && input <= maxValue)
            return input;
        if (minValue instanceof Date && maxValue instanceof Date &&
            input instanceof Date && input >= minValue && input <= maxValue)
            return input;
        if (typeof minValue === 'string' && typeof maxValue === 'string' &&
            typeof input === 'string' && input >= minValue && input <= maxValue)
            return input;
        context.fail(_this, `{{label}} must be between ${minValue} and ${maxValue}`, input);
    }, options);
}
exports.range = range;
