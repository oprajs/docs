import { Nullish } from 'ts-gems';
import { kValidatorFn } from './constants.js';
import { Context } from './context.js';
import { ErrorIssue, ExecutionOptions, ValidationOptions } from './types.js';
export type ValidateFunction<T, I = T, R extends Validator<T, I> = Validator<T, I>> = (input: I, context: Context, _this: R) => Nullish<T>;
export interface Validator<T = any, I = any, O extends ExecutionOptions = ExecutionOptions> {
    (input: I, options?: O, context?: Context): T;
    silent(input: I, options?: O, context?: Context): {
        value?: T;
        errors?: ErrorIssue[];
    };
    id: string;
    args?: Record<string, any>;
    [kValidatorFn]: ValidateFunction<T, I>;
}
export declare function validator<T, I = T, O extends ExecutionOptions = ExecutionOptions>(fn: ValidateFunction<T, I>, validatorOptions?: ValidationOptions): Validator<T, I, O>;
export declare function validator<T, I = T, O extends ExecutionOptions = ExecutionOptions>(id: string, fn: ValidateFunction<T, I>, validatorOptions?: ValidationOptions): Validator<T, I, O>;
export declare function isValidator(x: any): x is Validator;
