import { ValidationOptions, Validator } from '../core/index.js';
type RangeInput = number | bigint | Date | string;
/**
 * Checks if value is grater than "minValue"
 * @validator iGt
 */
export declare function isGt(minValue: number, options?: ValidationOptions): Validator<number, number>;
export declare function isGt(minValue: bigint, options?: ValidationOptions): Validator<bigint, bigint | number>;
export declare function isGt(minValue: Date, options?: ValidationOptions): Validator<Date, Date>;
export declare function isGt(minValue: string, options?: ValidationOptions & {
    caseInsensitive?: boolean;
}): Validator<string, string>;
/**
 * Checks if value is grater than or equal to minValue
 * @validator isGte
 */
export declare function isGte(minValue: number, options?: ValidationOptions): Validator<number, number>;
export declare function isGte(minValue: bigint, options?: ValidationOptions): Validator<bigint, bigint | number>;
export declare function isGte(minValue: Date, options?: ValidationOptions): Validator<Date, Date>;
export declare function isGte(minValue: string, options?: ValidationOptions & {
    caseInsensitive?: boolean;
}): Validator<string, string>;
/**
 * Checks if number value is lover than maxValue
 * @validator isLt
 */
export declare function isLt(maxValue: number, options?: ValidationOptions): Validator<number, number>;
export declare function isLt(maxValue: bigint, options?: ValidationOptions): Validator<bigint, bigint | number>;
export declare function isLt(maxValue: Date, options?: ValidationOptions): Validator<Date, Date>;
export declare function isLt(maxValue: string, options?: ValidationOptions & {
    caseInsensitive?: boolean;
}): Validator<string, string>;
/**
 * Checks if value is lover than or equal to maxValue
 * @validator isLte
 */
export declare function isLte(maxValue: number, options?: ValidationOptions): Validator<number, number>;
export declare function isLte(maxValue: bigint, options?: ValidationOptions): Validator<bigint, bigint | number>;
export declare function isLte(maxValue: Date, options?: ValidationOptions): Validator<Date, Date>;
export declare function isLte(maxValue: string, options?: ValidationOptions & {
    caseInsensitive?: boolean;
}): Validator<string, string>;
/**
 * Checks if value is between minValue and maxValue
 * @validator range
 */
export declare function range<T extends RangeInput>(minValue: T, maxValue: T, options?: ValidationOptions): Validator<T, T, import("../core/types.js").ExecutionOptions>;
export {};
