import { Type, ValidationOptions, Validator as Validator_ } from '../core/index.js';
export declare namespace IsObject {
    interface Validator<T extends object = object, I = object> extends Validator_<T, I> {
        schema: Schema;
    }
    type PropertyOptions = {
        label?: string;
        as?: string;
    };
    type Schema = Record<string | number, Validator_ | [Validator_, PropertyOptions]>;
    interface Options<T> extends ValidationOptions {
        name?: string;
        ctor?: Type<T>;
        additionalFields?: boolean | Validator_ | 'error';
        caseInSensitive?: boolean;
        detectCircular?: boolean;
    }
}
/**
 * Validates object according to schema
 * Converts properties according to schema rules if coerce option is set to 'true'.
 * @validator isObject
 */
export declare function isObject<T extends object = object, I = object | string>(schema?: IsObject.Schema, options?: IsObject.Options<T>): IsObject.Validator<T, I>;
