import * as validatorJS from 'validator';
import { ValidationOptions } from '../core/index.js';
/**
 * Validates if value is an "UUID".
 * @validator isUUID
 */
export declare function isUUID(version?: 1 | 2 | 3 | 4 | 5, options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
export interface IsEmailOptions extends ValidationOptions, validatorJS.IsEmailOptions {
}
/**
 * Validates if value is a valid Email
 * @validator isEmail
 */
export declare function isEmail(options?: IsEmailOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
export interface IsMobilePhoneOptions extends ValidationOptions, validatorJS.IsMobilePhoneOptions {
    locale?: 'any' | validatorJS.MobilePhoneLocale | validatorJS.MobilePhoneLocale[];
}
/**
 * Validates if value is a valid Email
 * @validator isMobilePhone
 */
export declare function isMobilePhone(options?: IsMobilePhoneOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Validates if value is an IP
 * @validator isIP
 */
export declare function isIP(version?: 4 | 6, options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Validates if value is an IP
 * @validator isUUID
 */
export declare function isIPRange(version?: 4 | 6, options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
export interface IsMACAddressOptions extends ValidationOptions, validatorJS.IsMACAddressOptions {
}
/**
 * Validates if value is an MACAddress
 * @validator isMACAddress
 */
export declare function isMACAddress(options?: IsMACAddressOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Validates if value is a port number
 * @validator isPort
 */
export declare function isPort(options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
export interface IsURLOptions extends ValidationOptions, validatorJS.IsURLOptions {
}
/**
 * Validates if value is an MACAddress
 * @validator isURL
 */
export declare function isURL(options?: IsURLOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
export interface Base64ValidatorOptions extends ValidationOptions, validatorJS.IsBase64Options {
}
/**
 * Validates if value is a "Base64" string.
 * @validator isBase64
 */
export declare function isBase64(options?: Base64ValidatorOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Validates if value is a BIC (Bank Identification Code) or SWIFT code
 * @validator isBIC
 */
export declare function isBIC(options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
export interface CreditCardValidatorOptions extends ValidationOptions, validatorJS.IsCreditCardOptions {
}
/**
 * Validates if value is a "Base64" formatted string.
 * @validator isCreditCard
 */
export declare function isCreditCard(options?: CreditCardValidatorOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Validates if value is an IBAN (International Bank Account Number)
 * @validator isEAN
 */
export declare function isIBAN(options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Validates if value is an passport number
 * @validator isPassportNumber
 */
export declare function isPassportNumber(countryCode: string, options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Validates if value is an EAN (European Article Number)
 * @validator isEAN
 */
export declare function isEAN(options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
export interface IsFQDNOptions extends ValidationOptions, validatorJS.IsFQDNOptions {
}
/**
 * Validates if value is an FQDN
 * @validator isFQDN
 */
export declare function isFQDN(options?: IsFQDNOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
export interface IsISSNOptions extends ValidationOptions, validatorJS.IsISSNOptions {
}
/**
 * Validates if value is an ISSN
 * @validator isISSN
 */
export declare function isISSN(options?: IsISSNOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Validates if value is an VAT number
 * @validator isVAT
 */
export declare function isVAT(countryCode: string, options?: IsISSNOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Validates if value is a BTC address.
 * @validator isBtcAddress
 */
export declare function isBtcAddress(options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Validates if value is a ETH (Ethereum) address.
 * @validator isBtcAddress
 */
export declare function isETHAddress(options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
export type HashAlgorithm = 'crc32' | 'crc32b' | 'md4' | 'md5' | 'ripemd128' | 'ripemd160' | 'sha1' | 'sha256' | 'sha384' | 'sha512' | 'tiger128' | 'tiger160' | 'tiger192';
/**
 * Validates if value a hash of type algorithm
 * @validator isHash
 */
export declare function isHash(algorithm: HashAlgorithm, options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Validates if value is a Hex Color
 * @validator isHexColor
 */
export declare function isHexColor(options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Validates if value a valid JWT token
 * @validator isHash
 */
export declare function isJWT(options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Validates if value a Lowercase string
 * @validator isLowercase
 */
export declare function isLowercase(options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Validates if value a Uppercase string
 * @validator isUppercase
 */
export declare function isUppercase(options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Check if the string contains only letters (a-zA-Z).
 * @validator isAlpha
 */
export declare function isAlpha(options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Check if the string contains only letters and numbers.
 * @validator isAlphanumeric
 */
export declare function isAlphanumeric(options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Check if the string contains ASCII chars only.
 * @validator isAscii
 */
export declare function isAscii(options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Check if the string represents a decimal number,
 * such as `0.1`, `.3`, `1.1`, `1.00003`, `4.0` etc.
 * @validator isDecimal
 */
export declare function isDecimal(options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Check if the string is a hexadecimal number.
 * @validator isHexadecimal
 */
export declare function isHexadecimal(options?: ValidationOptions): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
