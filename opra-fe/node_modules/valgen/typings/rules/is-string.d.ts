import { ValidationOptions } from '../core/index.js';
/**
 * Validates if value is "string".
 * Converts input value to string if coerce option is set to 'true'.
 * @validator isString
 */
export declare function isString(options?: ValidationOptions): import("../core/validator.js").Validator<string, unknown, import("../core/types.js").ExecutionOptions>;
/**
 * Process "String.replace" method
 * @validator stringReplace
 */
export declare function stringReplace(searchValue: string | RegExp, replaceValue: string): any;
export declare function stringReplace(searchValue: string | RegExp, replacer: (subsring: string, ...args: any[]) => string): any;
export declare function stringReplace(searchValue: {
    [Symbol.replace](string: string, replaceValue: string): string;
}, replaceValue: string): any;
export declare function stringReplace(searchValue: {
    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
}, replacer: (substring: string, ...args: any[]) => string): any;
/**
 * Process "String.split" method
 * @validator split
 */
export declare function stringSplit(separator: string | RegExp, limit?: number): any;
export declare function stringSplit(splitter: {
    [Symbol.split](string: string, limit?: number): string[];
}, limit?: number): any;
/**
 * Removes whitespace from both ends of a string
 * @validator trim
 */
export declare function trim(): import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Removes whitespace from the end of a string
 * @validator trimEnd
 */
export declare const trimEnd: () => import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
/**
 * Removes whitespace from the beginning of a string
 * @validator trimStart
 */
export declare const trimStart: () => import("../core/validator.js").Validator<string, string, import("../core/types.js").ExecutionOptions>;
