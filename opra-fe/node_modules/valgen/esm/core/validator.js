import { camelCase } from '../helpers/string.utils.js';
import { kOptions, kValidatorFn } from './constants.js';
import { Context } from './context.js';
import { ValidationError } from './validation-error.js';
export function validator(arg0, arg1, arg2) {
    let id = '';
    let fn;
    let validatorOptions;
    if (typeof arg0 === 'string') {
        id = arg0;
        fn = arg1;
        validatorOptions = arg2;
    }
    else {
        fn = arg0;
        validatorOptions = arg1;
    }
    if (typeof fn !== 'function')
        throw new TypeError('You must provide a rule function argument');
    id = id || fn.name || 'unnamed-rule';
    const name = fn.name || camelCase(id);
    const _rule = ({
        [name](input, options) {
            const ctx = options instanceof Context ? options : undefined;
            const opts = (ctx ? undefined : options);
            const context = ctx || new Context(opts);
            let value;
            try {
                value = fn(input, context, _rule);
            }
            catch (e) {
                if (e instanceof ValidationError)
                    throw e;
                context.fail(_rule, e, input);
            }
            if (!ctx && context.errors.length)
                throw new ValidationError(context.errors);
            return value;
        }
    })[name];
    _rule.id = id;
    _rule[kValidatorFn] = fn;
    _rule[kOptions] = validatorOptions || {};
    _rule.silent = (input, options, context) => {
        try {
            const value = _rule(input, options, context);
            return { value };
        }
        catch (e) {
            return { errors: e.issues };
        }
    };
    return _rule;
}
export function isValidator(x) {
    return !!(typeof x === 'function' && x.id && x[kValidatorFn]);
}
