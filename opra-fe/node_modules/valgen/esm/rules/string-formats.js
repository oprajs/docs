import * as validatorJS from 'validator';
import { validator } from '../core/index.js';
/**
 * Validates if value is an "UUID".
 * @validator isUUID
 */
export function isUUID(version, options) {
    return validator('isUUID', function (input, context, _this) {
        if (input != null && typeof input === 'string' && validatorJS.isUUID(input, version))
            return input;
        context.fail(_this, `{{label}} is not a valid UUID${version ? ' v' + version : ''}`, input);
    }, options);
}
/**
 * Validates if value is a valid Email
 * @validator isEmail
 */
export function isEmail(options) {
    return validator('isEmail', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isEmail(input, options))
            return input;
        context.fail(_this, `{{label}} is not a valid a EMail`, input);
    }, options);
}
/**
 * Validates if value is a valid Email
 * @validator isMobilePhone
 */
export function isMobilePhone(options) {
    return validator('isMobilePhone', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isMobilePhone(input, options?.locale, options))
            return input;
        context.fail(_this, `{{label}} is not a valid a Mobile Phone Number`, input);
    }, options);
}
/**
 * Validates if value is an IP
 * @validator isIP
 */
export function isIP(version, options) {
    return validator('isIP', function (input, context, _this) {
        if (input != null && typeof input === 'string' && validatorJS.isIP(input, version))
            return input;
        context.fail(_this, `{{label}} is not a valid IP${version ? ' v' + version : ''}`, input);
    }, options);
}
/**
 * Validates if value is an IP
 * @validator isUUID
 */
export function isIPRange(version, options) {
    return validator('isIPRange', function (input, context, _this) {
        if (input != null && typeof input === 'string' && validatorJS.isIPRange(input, version))
            return input;
        context.fail(_this, `{{label}} is not a valid IP${version ? ' v' + version : ''} range`, input);
    }, options);
}
/**
 * Validates if value is an MACAddress
 * @validator isMACAddress
 */
export function isMACAddress(options) {
    return validator('isMACAddress', function (input, context, _this) {
        if (input != null && typeof input === 'string' && validatorJS.isMACAddress(input, options))
            return input;
        context.fail(_this, `{{label}} is not a valid MAC address`, input);
    }, options);
}
/**
 * Validates if value is a port number
 * @validator isPort
 */
export function isPort(options) {
    return validator('isPort', function (input, context, _this) {
        if (input != null && typeof input === 'string' && validatorJS.isPort(input))
            return input;
        context.fail(_this, `{{label}} is not a valid port number`, input);
    }, options);
}
/**
 * Validates if value is an MACAddress
 * @validator isURL
 */
export function isURL(options) {
    return validator('isURL', function (input, context, _this) {
        if (input != null && typeof input === 'string' && validatorJS.isURL(input, options))
            return input;
        context.fail(_this, `{{label}} is not a valid URL`, input);
    }, options);
}
/**
 * Validates if value is a "Base64" string.
 * @validator isBase64
 */
export function isBase64(options) {
    return validator('isBase64', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isBase64(input, options))
            return input;
        context.fail(_this, `{{label}} is not a valid a Base64 string`, input);
    }, options);
}
/**
 * Validates if value is a BIC (Bank Identification Code) or SWIFT code
 * @validator isBIC
 */
export function isBIC(options) {
    return validator('isBIC', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isBIC(input))
            return input;
        context.fail(_this, `{{label}}is not a valid a BIC (Bank Identification Code) or SWIFT code`, input);
    }, options);
}
/**
 * Validates if value is a "Base64" formatted string.
 * @validator isCreditCard
 */
export function isCreditCard(options) {
    return validator('isCreditCard', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isCreditCard(input, options))
            return input;
        context.fail(_this, `{{label}} is not a valid Credit Card number`, input);
    }, options);
}
/**
 * Validates if value is an IBAN (International Bank Account Number)
 * @validator isEAN
 */
export function isIBAN(options) {
    return validator('isIBAN', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isIBAN(input))
            return input;
        context.fail(_this, `{{label}} is not a valid IBAN (International Bank Account Number)`, input);
    }, options);
}
/**
 * Validates if value is an passport number
 * @validator isPassportNumber
 */
export function isPassportNumber(countryCode, options) {
    return validator('isPassportNumber', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isPassportNumber(input, countryCode))
            return input;
        context.fail(_this, `{{label}} is not a valid ${countryCode} PassportNumber)`, input);
    }, options);
}
/**
 * Validates if value is an EAN (European Article Number)
 * @validator isEAN
 */
export function isEAN(options) {
    return validator('isEAN', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isEAN(input))
            return input;
        context.fail(_this, `{{label}} is not a valid EAN (European Article Number)`, input);
    }, options);
}
/**
 * Validates if value is an FQDN
 * @validator isFQDN
 */
export function isFQDN(options) {
    return validator('isFQDN', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isFQDN(input, options))
            return input;
        context.fail(_this, `{{label}} is not valid FQDN`, input);
    }, options);
}
/**
 * Validates if value is an ISSN
 * @validator isISSN
 */
export function isISSN(options) {
    return validator('isISSN', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isISSN(input, options))
            return input;
        context.fail(_this, `{{label}} is not a valid ISSN`, input);
    }, options);
}
/**
 * Validates if value is an VAT number
 * @validator isVAT
 */
export function isVAT(countryCode, options) {
    return validator('isVAT', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isVAT(input, countryCode))
            return input;
        context.fail(_this, `{{label}} is not a valid VAT number`, input);
    }, options);
}
/**
 * Validates if value is a BTC address.
 * @validator isBtcAddress
 */
export function isBtcAddress(options) {
    return validator('isBtcAddress', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isBtcAddress(input))
            return input;
        context.fail(_this, `{{label}} is not a valid a BTC address`, input);
    }, options);
}
/**
 * Validates if value is a ETH (Ethereum) address.
 * @validator isBtcAddress
 */
export function isETHAddress(options) {
    return validator('isETHAddress', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isEthereumAddress(input))
            return input;
        context.fail(_this, `{{label}} is not a valid a ETH (Ethereum) address`, input);
    }, options);
}
/**
 * Validates if value a hash of type algorithm
 * @validator isHash
 */
export function isHash(algorithm, options) {
    return validator('isHash', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isHash(input, algorithm))
            return input;
        context.fail(_this, `{{label}} is not a valid ${algorithm} hash`, input);
    }, options);
}
/**
 * Validates if value is a Hex Color
 * @validator isHexColor
 */
export function isHexColor(options) {
    return validator('isHexColor', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isHexColor(input))
            return input;
        context.fail(_this, `{{label}} is not a valid Hex Color`, input);
    }, options);
}
/**
 * Validates if value a valid JWT token
 * @validator isHash
 */
export function isJWT(options) {
    return validator('isJWT', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isJWT(input))
            return input;
        context.fail(_this, `{{label}} is not a valid JWT token`, input);
    }, options);
}
/**
 * Validates if value a Lowercase string
 * @validator isLowercase
 */
export function isLowercase(options) {
    return validator('isLowercase', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isLowercase(input))
            return input;
        context.fail(_this, `{{label}} is not a lowercase string`, input);
    }, options);
}
/**
 * Validates if value a Uppercase string
 * @validator isUppercase
 */
export function isUppercase(options) {
    return validator('isLowercase', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isUppercase(input))
            return input;
        context.fail(_this, `{{label}} is not an uppercase string`, input);
    }, options);
}
/**
 * Check if the string contains only letters (a-zA-Z).
 * @validator isAlpha
 */
export function isAlpha(options) {
    return validator('isLowercase', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isAlpha(input))
            return input;
        context.fail(_this, `{{label}} is not an alpha string`, input);
    }, options);
}
/**
 * Check if the string contains only letters and numbers.
 * @validator isAlphanumeric
 */
export function isAlphanumeric(options) {
    return validator('isLowercase', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isAlphanumeric(input))
            return input;
        context.fail(_this, `{{label}} is not an alphanumeric string`, input);
    }, options);
}
/**
 * Check if the string contains ASCII chars only.
 * @validator isAscii
 */
export function isAscii(options) {
    return validator('isLowercase', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isAscii(input))
            return input;
        context.fail(_this, `{{label}} is not an ascii string`, input);
    }, options);
}
/**
 * Check if the string represents a decimal number,
 * such as `0.1`, `.3`, `1.1`, `1.00003`, `4.0` etc.
 * @validator isDecimal
 */
export function isDecimal(options) {
    return validator('isLowercase', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isDecimal(input))
            return input;
        context.fail(_this, `{{label}} is not an decimal number string`, input);
    }, options);
}
/**
 * Check if the string is a hexadecimal number.
 * @validator isHexadecimal
 */
export function isHexadecimal(options) {
    return validator('isLowercase', function (input, context, _this) {
        if (typeof input === 'string' && validatorJS.isHexadecimal(input))
            return input;
        context.fail(_this, `{{label}} is not an hexadecimal string`, input);
    }, options);
}
