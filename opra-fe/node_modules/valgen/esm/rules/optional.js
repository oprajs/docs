import { validator } from '../core/index.js';
/**
 * Makes sub-rule optional
 * @validator optional
 */
export function optional(nested, options) {
    return validator('optional', function (input, context) {
        if (input == null)
            return input;
        return nested(input, context);
    }, options);
}
/**
 * Makes sub-rule required
 * @validator required
 */
export function required(nested, options) {
    return validator('required', function (input, context, _this) {
        if (input == null) {
            context.fail(_this, `{{label}} is required`, input);
            return;
        }
        return nested(input, context);
    }, options);
}
/**
 * Validates if property exists
 * @validator exists
 */
export function exists(options) {
    return validator('exists', function (input, context, _this) {
        if (input !== undefined ||
            (context.scope &&
                Object.getOwnPropertyDescriptor(context.scope, input)))
            return input;
        context.fail(_this, `{{label}} must exist`, input);
    }, options);
}
