import { Type } from 'ts-gems';
import { FallbackLng, Formatter as I18nextFormatter, i18n, InitOptions as I18nextInitOptions, Resource as I18nextResource, TFunction as I18nextTFunction, TOptions } from '@browsery/i18next';
import * as I18next from '@browsery/i18next';
export type BaseI18n = Type<I18next.i18n>;
export declare const BaseI18n: BaseI18n;
export type DeepTranslateOptions = TOptions & {
    ignore?: (input: any, inst: i18n) => boolean;
};
export type InitCallback = I18next.Callback;
export type TranslateFunction = I18nextTFunction;
export type Formatter = I18nextFormatter;
export type LanguageResource = I18nextResource;
export type { FallbackLng };
export interface InitOptions extends I18nextInitOptions {
    resourceDirs?: string[];
}
export declare class I18n extends BaseI18n {
    init(callback?: InitCallback): Promise<TranslateFunction>;
    init(options: InitOptions, callback?: InitCallback): Promise<TranslateFunction>;
    deep(input: any, options?: DeepTranslateOptions): any;
    createInstance(options: {} | undefined, callback: any): I18n;
    static createInstance(options?: InitOptions, callback?: InitCallback): I18n;
    protected _deepTranslate(input: any, objectStack: WeakMap<object, any>, options?: DeepTranslateOptions): any;
    static get defaultInstance(): I18n;
}
