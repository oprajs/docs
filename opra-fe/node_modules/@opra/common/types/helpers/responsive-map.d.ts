export interface ResponsiveMapOptions {
    wellKnownKeys?: string[];
    caseSensitive?: boolean;
}
export type ResponsiveMapInit<V> = ResponsiveMap<V> | Map<string, V> | Record<any, V>;
declare const kKeyMap: unique symbol;
declare const kKeyOrder: unique symbol;
declare const kWellKnownKeys: unique symbol;
declare const kOptions: unique symbol;
/**
 * A Map implementation that supports case-insensitivity and ordered keys
 */
export declare class ResponsiveMap<V> extends Map<string, V> {
    private [kKeyMap];
    private [kKeyOrder];
    private [kWellKnownKeys];
    private [kOptions];
    constructor(init?: ResponsiveMapInit<V> | null, options?: ResponsiveMapOptions);
    clear(): void;
    get(key: string): V | undefined;
    has(key: string): boolean;
    set(key: string, value: V): this;
    setAll(source: ResponsiveMapInit<V>): this;
    keys(): IterableIterator<string>;
    values(): IterableIterator<V>;
    entries(): IterableIterator<[string, V]>;
    delete(key: string): boolean;
    sort(compareFn?: (a: string, b: string) => number): this;
    getProxy(handler?: ProxyHandler<Record<string, V>>): Record<string, V>;
    toObject(): Record<string, V>;
    [Symbol.iterator](): IterableIterator<[string, V]>;
    protected _getOriginalKey(key: string): string;
    protected _getStoringKey(key: string): string;
}
export {};
