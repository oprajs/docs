import { PartialSome, StrictOmit, Type } from 'ts-gems';
import { ResponsiveMap } from '../../helpers/index.js';
import { OpraSchema } from '../../schema/index.js';
import { ThunkAsync } from '../../types.js';
import { ComplexType } from '../data-type/complex-type.js';
import { DataType } from '../data-type/data-type.js';
import { EnumType } from '../data-type/enum-type.js';
import { MappedType } from '../data-type/mapped-type.js';
import { MixinType } from '../data-type/mixin-type.js';
import { SimpleType } from '../data-type/simple-type.js';
import { TypeDocument } from '../type-document.js';
type ReferenceUnion = string | OpraSchema.TypeDocument | TypeDocument;
export declare namespace TypeDocumentFactory {
    interface InitArguments extends PartialSome<StrictOmit<OpraSchema.TypeDocument, 'references' | 'types'>, 'version'> {
        references?: Record<string, ReferenceUnion | Promise<ReferenceUnion>>;
        types?: ThunkAsync<Type | EnumType.EnumObject | EnumType.EnumArray>[] | Record<string, OpraSchema.DataType>;
        noBuiltinTypes?: boolean;
    }
    type DataTypeInitializer = (ComplexType.InitArguments & {
        kind: OpraSchema.ComplexType.Kind;
    }) | (SimpleType.InitArguments & {
        kind: OpraSchema.SimpleType.Kind;
    }) | (MixinType.InitArguments & {
        kind: OpraSchema.MixinType.Kind;
    }) | (MappedType.InitArguments & {
        kind: OpraSchema.MappedType.Kind;
    }) | (EnumType.InitArguments & {
        kind: OpraSchema.EnumType.Kind;
    });
}
/**
 * @class TypeDocumentFactory
 */
export declare class TypeDocumentFactory {
    static designTypeMap: Map<Function | Type<any>, string>;
    protected document: TypeDocument;
    protected typeQueue: ResponsiveMap<any>;
    protected circularRefs: Map<any, any>;
    protected curPath: string[];
    protected cache: Map<any, any>;
    /**
     * Creates ApiDocument instance from given schema object
     */
    static createDocument(init: TypeDocumentFactory.InitArguments): Promise<TypeDocument>;
    /**
     * Downloads schema from the given URL and creates the document instance   * @param url
     */
    static createDocumentFromUrl(url: string): Promise<TypeDocument>;
    protected initDocument(init: TypeDocumentFactory.InitArguments): Promise<TypeDocument>;
    initDocumentFromUrl(url: string): Promise<TypeDocument>;
    protected createBuiltinTypeDocument(): Promise<TypeDocument>;
    protected addReferences(references: Record<string, ReferenceUnion | Promise<ReferenceUnion>>): Promise<void>;
    protected importDataType(thunk: ThunkAsync<string | Type | EnumType.EnumObject | EnumType.EnumArray | OpraSchema.DataType>): Promise<DataType>;
    protected prepareDataTypeInitArguments(schema: TypeDocumentFactory.DataTypeInitializer | OpraSchema.DataType, ctor?: Type): Promise<TypeDocumentFactory.DataTypeInitializer | undefined>;
    protected createDataTypeInstance(kind: OpraSchema.DataType.Kind, name?: string): DataType;
}
export {};
