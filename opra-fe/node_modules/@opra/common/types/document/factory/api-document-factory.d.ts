import { StrictOmit, Type } from 'ts-gems';
import { ResponsiveMap } from '../../helpers/index.js';
import { OpraSchema } from '../../schema/index.js';
import { ThunkAsync } from '../../types.js';
import { ApiDocument } from '../api-document.js';
import { Collection } from '../resource/collection.js';
import { Container } from '../resource/container.js';
import { Resource } from '../resource/resource.js';
import { Singleton } from '../resource/singleton.js';
import { Storage } from '../resource/storage.js';
import { TypeDocumentFactory } from './type-document-factory.js';
export declare namespace ApiDocumentFactory {
    interface RootInit extends StrictOmit<OpraSchema.Container, 'kind' | 'resources'> {
        resources?: ThunkAsync<Type | object>[] | Record<OpraSchema.Resource.Name, OpraSchema.Resource>;
    }
    interface InitArguments extends TypeDocumentFactory.InitArguments {
        root?: RootInit;
    }
    type ResourceInitializer = (Collection.InitArguments & {
        kind: OpraSchema.Collection.Kind;
    }) | (Singleton.InitArguments & {
        kind: OpraSchema.Singleton.Kind;
    }) | (Storage.InitArguments & {
        kind: OpraSchema.Storage.Kind;
    }) | (StrictOmit<Container.InitArguments, 'resources'> & {
        kind: OpraSchema.Container.Kind;
        resources?: ResourceInitializer[];
    });
}
/**
 * @class ApiDocumentFactory
 */
export declare class ApiDocumentFactory extends TypeDocumentFactory {
    protected document: ApiDocument;
    protected resourceQueue: ResponsiveMap<any>;
    /**
     * Creates ApiDocument instance from given schema object
     * @param init
     */
    static createDocument(init: ApiDocumentFactory.InitArguments): Promise<ApiDocument>;
    /**
     * Downloads schema from the given URL and creates the document instance   * @param url
     */
    static createDocumentFromUrl(url: string): Promise<ApiDocument>;
    protected initDocument(init: ApiDocumentFactory.InitArguments): Promise<ApiDocument>;
    protected importResourceSchema(name: string, schema: OpraSchema.Resource): Promise<ApiDocumentFactory.ResourceInitializer>;
    protected importResourceInstance(thunk: ThunkAsync<Type | object>): Promise<ApiDocumentFactory.ResourceInitializer>;
    protected createResource(container: Container, initArguments: ApiDocumentFactory.ResourceInitializer): Promise<Resource>;
}
