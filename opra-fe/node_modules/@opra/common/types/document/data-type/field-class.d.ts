import { Type } from 'ts-gems';
import { Validator } from 'valgen';
import type { OpraSchema } from '../../schema/index.js';
import type { ComplexType } from './complex-type.js';
import type { DataType } from './data-type.js';
import type { ApiField } from './field.js';
export declare class FieldClass {
    readonly owner: ComplexType;
    readonly origin?: ComplexType;
    readonly type: DataType;
    readonly name: string;
    readonly designType?: Type;
    description?: string;
    isArray?: boolean;
    default?: any;
    fixed?: string | number | boolean;
    required?: boolean;
    readonly?: boolean;
    writeonly?: boolean;
    exclusive?: boolean;
    translatable?: boolean;
    deprecated?: boolean | string;
    examples?: any[] | Record<string, any>;
    pattern?: RegExp;
    partialUpdate?: boolean;
    constructor(owner: ComplexType, init: ApiField.InitArguments);
    exportSchema(options?: {
        webSafe?: boolean;
    }): OpraSchema.Field;
    generateCodec(codec: 'decode' | 'encode', options?: DataType.GenerateCodecOptions): Validator;
}
