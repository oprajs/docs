import 'reflect-metadata';
import { StrictOmit, Type } from 'ts-gems';
import { ResponsiveMap } from '../../helpers/index.js';
import { OpraSchema } from '../../schema/index.js';
import type { TypeThunkAsync } from '../../types.js';
import type { ApiDocument } from '../api-document.js';
import { ComplexTypeClass } from './complex-type-class.js';
import { DataType } from './data-type.js';
import { ApiField } from './field.js';
import type { MappedType } from './mapped-type.js';
import type { MixinType } from './mixin-type.js';
/**
 * Callable class pattern for ComplexType
 */
export interface ComplexTypeConstructor {
    new (document: ApiDocument, init: ComplexType.InitArguments): ComplexType;
    (options?: ComplexType.DecoratorOptions): ClassDecorator;
    prototype: ComplexType;
}
export interface ComplexType extends ComplexTypeClass {
}
/**
 * @class ComplexType
 * @decorator ComplexType
 */
export declare const ComplexType: ComplexTypeConstructor;
/**
 * @namespace ComplexType
 */
export declare namespace ComplexType {
    interface InitArguments extends DataType.InitArguments, Pick<OpraSchema.ComplexType, 'ctor' | 'abstract'> {
        base?: ComplexType | MappedType | MixinType;
        fields?: Record<string, ApiField.InitArguments>;
        additionalFields?: boolean | DataType | 'error';
        embedded?: boolean;
    }
    interface OwnProperties extends DataType.OwnProperties {
        ctor?: Type;
        additionalFields?: boolean | DataType | 'error';
        fields: ResponsiveMap<ApiField>;
        embedded?: boolean;
    }
    interface DecoratorOptions extends DataType.DecoratorOptions, Pick<InitArguments, 'ctor' | 'abstract'> {
        embedded?: boolean;
        additionalFields?: boolean | 'error' | string | TypeThunkAsync;
    }
    interface Metadata extends StrictOmit<OpraSchema.ComplexType, 'fields'> {
        name: string;
        fields?: Record<string, ApiField.Metadata>;
    }
}
