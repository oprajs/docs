import { RequiredSome, StrictOmit, Type } from 'ts-gems';
import { OnFailFunction, Validator } from 'valgen';
import { OpraSchema } from '../../schema/index.js';
import type { ApiDocument } from '../api-document.js';
import { nodeInspectCustom } from '../utils/inspect.util.js';
import { ApiField } from './field.js';
/**
 * @class DataType
 * @abstract
 */
export declare abstract class DataType {
    readonly document: ApiDocument;
    readonly kind: OpraSchema.DataType.Kind;
    readonly name?: string;
    readonly base?: DataType;
    readonly own: DataType.OwnProperties;
    description?: string;
    isEmbedded?: boolean;
    protected constructor(document: ApiDocument, init?: DataType.InitArguments);
    abstract generateCodec(codec: 'decode' | 'encode', options?: DataType.GenerateCodecOptions): Validator;
    exportSchema(options?: {
        webSafe?: boolean;
    }): OpraSchema.DataType;
    extendsFrom(type: string | Type | DataType): any;
    toString(): string;
    [nodeInspectCustom](): string;
}
export declare namespace DataType {
    interface InitArguments {
        name?: string;
        description?: string;
        example?: string | string[];
    }
    interface DecoratorOptions extends InitArguments {
    }
    interface Metadata extends RequiredSome<DecoratorOptions, 'name'> {
        kind: OpraSchema.DataType.Kind;
    }
    interface OwnProperties {
    }
    type GenerateCodecField = StrictOmit<ApiField.InitArguments, 'type' | 'name'> & {
        type?: DataType | string;
    };
    type OverrideFieldsConfig = GenerateCodecField & {
        overrideFields?: Record<string, OverrideFieldsConfig>;
    };
    interface GenerateCodecOptions {
        caseSensitive?: boolean;
        pick?: string[] | readonly string[];
        omit?: string[] | readonly string[];
        partial?: boolean;
        operation?: 'read' | 'write';
        overwriteFields?: Record<string, OverrideFieldsConfig>;
        designType?: Type;
        onFail?: OnFailFunction;
    }
}
