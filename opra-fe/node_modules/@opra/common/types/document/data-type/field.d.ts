import { StrictOmit, Type } from 'ts-gems';
import { OpraSchema } from '../../schema/index.js';
import { TypeThunkAsync } from '../../types.js';
import type { ComplexType } from './complex-type.js';
import type { DataType } from './data-type.js';
import type { EnumType } from './enum-type.js';
import { FieldClass } from './field-class.js';
import { FieldDecorator } from './field-decorator.js';
/**
 * Type definition of ComplexType constructor type
 * @type FieldConstructor
 */
export interface FieldConstructor extends FieldDecorator {
    prototype: FieldClass;
    new (owner: ComplexType, init: ApiField.InitArguments): FieldClass;
}
export interface ApiField extends FieldClass {
}
/**
 * @class ApiField
 * @decorator ApiField
 */
export declare const ApiField: FieldConstructor;
/**
 * @namespace ApiField
 */
export declare namespace ApiField {
    interface InitArguments extends StrictOmit<OpraSchema.Field, 'type' | 'pattern'> {
        name: string;
        type: DataType;
        designType?: Type;
        origin?: ComplexType;
        pattern?: string | RegExp;
    }
    interface DecoratorOptions extends Partial<StrictOmit<OpraSchema.Field, 'isArray' | 'type' | 'pattern'>> {
        type?: string | OpraSchema.DataType | TypeThunkAsync;
        enum?: EnumType.EnumObject | EnumType.EnumArray;
        pattern?: string | RegExp;
    }
    interface Metadata extends StrictOmit<OpraSchema.Field, 'type' | 'pattern'> {
        type?: string | OpraSchema.DataType | TypeThunkAsync;
        enum?: EnumType.EnumObject | EnumType.EnumArray;
        designType?: Type;
        pattern?: string | RegExp;
    }
}
