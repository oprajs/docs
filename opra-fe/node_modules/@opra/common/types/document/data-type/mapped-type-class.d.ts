import type { Field } from '../../schema/data-type/field.interface.js';
import { OpraSchema } from '../../schema/index.js';
import type { ApiDocument } from '../api-document.js';
import type { ComplexType } from './complex-type.js';
import { ComplexTypeClass } from './complex-type-class.js';
import type { MappedType } from './mapped-type.js';
import type { MixinType } from './mixin-type';
export declare class MappedTypeClass extends ComplexTypeClass {
    readonly kind: OpraSchema.DataType.Kind;
    readonly own: MappedType.OwnProperties;
    readonly base: ComplexType | MixinType | MappedType;
    readonly omit?: Field.Name[];
    readonly pick?: Field.Name[];
    readonly partial?: Field.Name[] | boolean;
    constructor(document: ApiDocument, init: MappedType.InitArguments);
    exportSchema(): any;
}
export declare function getIsInheritedPredicateFn(pick?: Field.Name[], omit?: Field.Name[]): (propertyName: string) => boolean;
