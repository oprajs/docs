import 'reflect-metadata';
import { Class, StrictOmit, Type } from 'ts-gems';
import { OpraSchema } from '../../schema/index.js';
import type { ApiDocument } from '../api-document.js';
import { ComplexType } from './complex-type.js';
import { MappedType } from './mapped-type.js';
import { MixinTypeClass } from './mixin-type-class.js';
/**
 * Type definition of MixinType constructor type
 * @type MixinTypeConstructor
 */
export interface MixinTypeConstructor {
    prototype: MixinType;
    new (document: ApiDocument, init: MixinType.InitArguments): MixinType;
    <A1 extends any[], I1, S1, A2 extends any[], I2, S2, A3 extends any[], I3, S3, A4 extends any[], I4, S4>(c1: Class<A1, I1, S1>, c2: Class<A2, I2, S2>, c3?: Class<A3, I3, S3>, c4?: Class<A4, I4, S4>): Class<any[], I1 & I2 & I3 & I4, S1 & S2 & S3 & S4>;
    _applyMixin(target: Type, ...sources: [Type]): void;
}
/**
 * Type definition of MixinType prototype
 * @type MixinType
 */
export interface MixinType extends MixinTypeClass {
}
/**
 * @class MixinType
 */
export declare const MixinType: MixinTypeConstructor;
/**
 * @namespace MixinType
 */
export declare namespace MixinType {
    interface InitArguments extends ComplexType.InitArguments {
        types: (ComplexType | MixinType | MappedType)[];
    }
    interface Metadata extends StrictOmit<ComplexType.Metadata, 'kind' | 'base' | 'name'> {
        kind: OpraSchema.MixinType.Kind;
        base?: Type;
        types: Type[];
    }
    interface OwnProperties extends ComplexType.OwnProperties {
        types: (ComplexType | MixinType | MappedType)[];
    }
}
