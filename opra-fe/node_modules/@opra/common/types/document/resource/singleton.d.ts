import { Combine, StrictOmit } from 'ts-gems';
import type { ApiDocument } from '../api-document.js';
import type { ComplexType } from '../data-type/complex-type.js';
import type { Container } from './container.js';
import type { Resource } from './resource.js';
import { SingletonClass } from './singleton-class.js';
import { SingletonDecorator } from './singleton-decorator.js';
export interface Singleton extends SingletonClass {
}
export interface SingletonConstructor extends SingletonDecorator {
    prototype: SingletonClass;
    new (parent: ApiDocument | Container, init: Singleton.InitArguments): SingletonClass;
}
/**
 * @class Singleton
 * @decorator Singleton
 */
export declare const Singleton: SingletonConstructor;
/**
 * @namespace Singleton
 */
export declare namespace Singleton {
    interface InitArguments extends StrictOmit<Combine<Resource.InitArguments, SingletonDecorator.Metadata>, 'kind' | 'type'> {
        name: string;
        type: ComplexType;
    }
    interface DecoratorOptions extends Partial<StrictOmit<SingletonDecorator.Metadata, 'kind' | 'operations' | 'actions'>> {
    }
    interface Action {
    }
    namespace Action {
    }
    interface Create {
    }
    namespace Create {
    }
    interface Delete {
    }
    namespace Delete {
    }
    interface Get {
    }
    namespace Get {
    }
    interface Update {
    }
    namespace Update {
    }
}
