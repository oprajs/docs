import { Combine, StrictOmit, Type } from 'ts-gems';
import { Field } from '../../schema/data-type/field.interface.js';
import { OpraSchema } from '../../schema/index.js';
import { TypeThunkAsync } from '../../types.js';
import { ActionDecorator } from './action-decorator.js';
import { CollectionDecorator } from './collection-decorator.js';
import { ResourceDecorator } from './resource-decorator.js';
import type { Singleton } from './singleton.js';
type ErrorMessage<T, Error> = [T] extends [never] ? Error : T;
declare const operationProperties: readonly ["create", "delete", "get", "update"];
type OperationProperties = typeof operationProperties[number];
export declare function SingletonDecorator(type: Type | string, options?: Singleton.DecoratorOptions): ClassDecorator;
export interface SingletonDecorator extends StrictOmit<ResourceDecorator, 'Action'> {
    <T>(type: Type<T> | string, options?: Singleton.DecoratorOptions): ClassDecorator;
    Action: (options?: SingletonDecorator.Action.Options) => (<T, K extends keyof T>(target: T, propertyKey: ErrorMessage<Exclude<K, OperationProperties>, `'${string & K}' property is reserved for operation endpoints and can not be used for actions`>) => void) & ActionDecorator;
    Create: typeof SingletonDecorator.Create;
    Delete: typeof SingletonDecorator.Delete;
    Get: typeof SingletonDecorator.Get;
    Update: typeof SingletonDecorator.Update;
}
/**
 * @namespace SingletonDecorator
 */
export declare namespace SingletonDecorator {
    interface Metadata extends StrictOmit<OpraSchema.Singleton, 'kind' | 'type' | 'operations' | 'actions'> {
        kind: OpraSchema.Singleton.Kind;
        name: string;
        type: TypeThunkAsync | string;
        actions?: Record<string, ResourceDecorator.OperationMetadata>;
        operations?: {
            create: Create.Metadata;
            delete: Delete.Metadata;
            get: Get.Metadata;
            update: Update.Metadata;
        };
    }
    /**
     * @namespace Action
     */
    namespace Action {
        interface Metadata extends ResourceDecorator.OperationMetadata {
        }
        interface Options extends ResourceDecorator.OperationOptions {
        }
    }
    /**
     * @namespace Create
     */
    namespace Create {
        interface Metadata extends Combine<ResourceDecorator.OperationMetadata, OpraSchema.Singleton.Operations.Create> {
        }
        interface Options extends Combine<ResourceDecorator.OperationOptions, Partial<OpraSchema.Singleton.Operations.Create>> {
        }
    }
    /**
     * @namespace Delete
     */
    namespace Delete {
        interface Metadata extends Combine<ResourceDecorator.OperationMetadata, OpraSchema.Singleton.Operations.Delete> {
        }
        interface Options extends Combine<ResourceDecorator.OperationOptions, Partial<OpraSchema.Singleton.Operations.Delete>> {
        }
    }
    /**
     * @namespace Get
     */
    namespace Get {
        interface Metadata extends Combine<ResourceDecorator.OperationMetadata, OpraSchema.Singleton.Operations.Get> {
        }
        interface Options extends Combine<ResourceDecorator.OperationOptions, Partial<OpraSchema.Singleton.Operations.Get>> {
        }
    }
    /**
     * @namespace Update
     */
    namespace Update {
        interface Metadata extends Combine<ResourceDecorator.OperationMetadata, OpraSchema.Singleton.Operations.Update> {
        }
        interface Options extends Combine<ResourceDecorator.OperationOptions, Partial<OpraSchema.Singleton.Operations.Update>> {
        }
    }
}
export declare namespace SingletonDecorator {
    /**
     * Action PropertyDecorator
     */
    function Action(options: ResourceDecorator.OperationOptions): ActionDecorator;
    /**
     * Create PropertyDecorator
     */
    type CreateDecorator = ((target: Object, propertyKey: 'create') => void) & {
        Parameter: (name: string, optionsOrType?: ResourceDecorator.ParameterOptions | string | Type) => CreateDecorator;
        InputMaxContentSize: (sizeInBytes: number) => CreateDecorator;
        InputPickFields: (...fields: Field.QualifiedName[]) => CreateDecorator;
        InputOmitFields: (...fields: Field.QualifiedName[]) => CreateDecorator;
        InputOverwriteFields: (fields: Record<string, CollectionDecorator.FieldDecoratorOptions>) => CreateDecorator;
        OutputPickFields: (...fields: Field.QualifiedName[]) => CreateDecorator;
        OutputOmitFields: (...fields: Field.QualifiedName[]) => CreateDecorator;
        OutputOverwriteFields: (fields: Record<string, CollectionDecorator.FieldDecoratorOptions>) => CreateDecorator;
    };
    function Create(options?: Create.Options): CreateDecorator;
}
export declare namespace SingletonDecorator {
    type GetDecorator = ((target: Object, propertyKey: 'get') => void) & {
        Parameter: (name: string, optionsOrType?: ResourceDecorator.ParameterOptions | string | Type) => GetDecorator;
        OutputPickFields: (...fields: Field.QualifiedName[]) => GetDecorator;
        OutputOmitFields: (...fields: Field.QualifiedName[]) => GetDecorator;
        OutputOverwriteFields: (fields: Record<string, CollectionDecorator.FieldDecoratorOptions>) => GetDecorator;
    };
    function Get(options?: Get.Options): GetDecorator;
}
export declare namespace SingletonDecorator {
    type DeleteDecorator = ((target: Object, propertyKey: 'delete') => void) & {
        Parameter: (name: string, optionsOrType?: ResourceDecorator.ParameterOptions | string | Type) => DeleteDecorator;
    };
    function Delete(options?: Delete.Options): DeleteDecorator;
}
export declare namespace SingletonDecorator {
    type UpdateDecorator = ((target: Object, propertyKey: 'update') => void) & {
        Parameter: (name: string, optionsOrType?: ResourceDecorator.ParameterOptions | string | Type) => UpdateDecorator;
        InputMaxContentSize: (sizeInBytes: number) => UpdateDecorator;
        InputPickFields: (...fields: Field.QualifiedName[]) => UpdateDecorator;
        InputOmitFields: (...fields: Field.QualifiedName[]) => UpdateDecorator;
        InputOverwriteFields: (fields: Record<string, CollectionDecorator.FieldDecoratorOptions>) => UpdateDecorator;
        OutputPickFields: (...fields: Field.QualifiedName[]) => UpdateDecorator;
        OutputOmitFields: (...fields: Field.QualifiedName[]) => UpdateDecorator;
        OutputOverwriteFields: (fields: Record<string, CollectionDecorator.FieldDecoratorOptions>) => UpdateDecorator;
    };
    function Update(options?: Update.Options): UpdateDecorator;
}
export {};
