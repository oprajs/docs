import { Combine, StrictOmit } from 'ts-gems';
import type { ApiDocument } from '../api-document.js';
import type { Container } from './container.js';
import type { Resource } from './resource.js';
import { StorageClass } from './storage-class.js';
import { StorageDecorator } from './storage-decorator.js';
export interface Storage extends StorageClass {
}
export interface StorageConstructor extends StorageDecorator {
    prototype: StorageClass;
    new (parent: ApiDocument | Container, init: Storage.InitArguments): StorageClass;
}
/**
 * @class Storage
 * @decorator Storage
 */
export declare const Storage: StorageConstructor;
export declare namespace Storage {
    interface InitArguments extends StrictOmit<Combine<Resource.InitArguments, StorageDecorator.Metadata>, 'kind'> {
    }
    interface DecoratorOptions extends Partial<StrictOmit<StorageDecorator.Metadata, 'kind' | 'operations' | 'actions'>> {
    }
    interface Action {
    }
    namespace Action {
    }
    interface Delete {
    }
    namespace Delete {
    }
    interface Get {
    }
    namespace Get {
    }
    interface Post {
    }
    namespace Post {
    }
}
