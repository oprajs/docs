import { Combine, StrictOmit, Type } from 'ts-gems';
import { OpraSchema } from '../../schema/index.js';
import { TypeThunkAsync } from '../../types.js';
import { ActionDecorator } from './action-decorator.js';
import { ResourceDecorator } from './resource-decorator.js';
import type { Storage } from './storage.js';
type ErrorMessage<T, Error> = [T] extends [never] ? Error : T;
declare const operationProperties: readonly ["delete", "get", "post"];
type OperationProperties = typeof operationProperties[number];
export declare function StorageDecorator(options?: Storage.DecoratorOptions): ClassDecorator;
export interface StorageDecorator extends StrictOmit<ResourceDecorator, 'Action'> {
    (options?: Storage.DecoratorOptions): ClassDecorator;
    Action: (options?: StorageDecorator.Action.Options) => (<T, K extends keyof T>(target: T, propertyKey: ErrorMessage<Exclude<K, OperationProperties>, `'${string & K}' property is reserved for operation endpoints and can not be used for actions`>) => void) & ActionDecorator;
    Delete: typeof StorageDecorator.Delete;
    Get: typeof StorageDecorator.Get;
    Post: typeof StorageDecorator.Post;
}
/**
 * @namespace CollectionDecorator
 */
export declare namespace StorageDecorator {
    interface Metadata extends StrictOmit<OpraSchema.Storage, 'kind' | 'operations' | 'actions'> {
        kind: OpraSchema.Storage.Kind;
        name: string;
        actions?: Record<string, ResourceDecorator.OperationMetadata>;
        operations?: {
            get: Get.Metadata;
            delete: Delete.Metadata;
            post: Post.Metadata;
        };
    }
    /**
     * @namespace Action
     */
    namespace Action {
        interface Metadata extends ResourceDecorator.OperationMetadata {
        }
        interface Options extends ResourceDecorator.OperationOptions {
        }
    }
    /**
     * @namespace Get
     */
    namespace Get {
        interface Metadata extends Combine<ResourceDecorator.OperationMetadata, OpraSchema.Storage.Operations.Get> {
        }
        interface Options extends Combine<ResourceDecorator.OperationOptions, Partial<OpraSchema.Storage.Operations.Get>> {
        }
    }
    /**
     * @namespace Delete
     */
    namespace Delete {
        interface Metadata extends Combine<ResourceDecorator.OperationMetadata, OpraSchema.Storage.Operations.Delete> {
        }
        interface Options extends Combine<ResourceDecorator.OperationOptions, Partial<OpraSchema.Storage.Operations.Delete>> {
        }
    }
    /**
     * @namespace Post
     */
    namespace Post {
        interface Metadata extends Combine<ResourceDecorator.OperationMetadata, OpraSchema.Storage.Operations.Post> {
        }
        interface Options extends Combine<ResourceDecorator.OperationOptions, Partial<OpraSchema.Storage.Operations.Post>> {
        }
    }
}
export declare namespace StorageDecorator {
    /**
     * Action PropertyDecorator
     */
    function Action(options: ResourceDecorator.OperationOptions): ActionDecorator;
    type DeleteDecorator = ((target: Object, propertyKey: 'delete') => void) & {
        Parameter: (name: string, optionsOrType?: ResourceDecorator.ParameterOptions | string | Type) => DeleteDecorator;
    };
    function Delete(options?: Delete.Options): DeleteDecorator;
    /**
     * Get PropertyDecorator
     */
    type GetDecorator = ((target: Object, propertyKey: 'get') => void) & {
        Parameter: (name: string, optionsOrType?: ResourceDecorator.ParameterOptions | string | Type) => GetDecorator;
    };
    function Get(options?: Get.Options): GetDecorator;
    /**
     * Post PropertyDecorator
     */
    type PostDecorator = ((target: Object, propertyKey: 'post') => void) & {
        Parameter(name: string, optionsOrType?: ResourceDecorator.ParameterOptions | string | Type): PostDecorator;
        MaxFields(amount: number): PostDecorator;
        MaxFieldSize(sizeInBytes: number): PostDecorator;
        MaxFiles(amount: number): PostDecorator;
        MaxFileSize(sizeInBytes: number): PostDecorator;
        MaxTotalFileSize(sizeInBytes: number): PostDecorator;
        MinFileSize(sizeInBytes: number): PostDecorator;
        Returns(t: TypeThunkAsync | string): PostDecorator;
    };
    function Post(options?: Post.Options): PostDecorator;
}
export {};
