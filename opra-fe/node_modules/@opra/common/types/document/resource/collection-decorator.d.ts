import { Combine, StrictOmit, Type } from 'ts-gems';
import type { OpraFilter } from '../../filter/index.js';
import { Field } from '../../schema/data-type/field.interface.js';
import { OpraSchema } from '../../schema/index.js';
import { TypeThunkAsync } from '../../types.js';
import { EnumType } from '../data-type/enum-type.js';
import { ActionDecorator } from './action-decorator.js';
import type { Collection } from './collection.js';
import { ResourceDecorator } from './resource-decorator.js';
type ErrorMessage<T, Error> = [T] extends [never] ? Error : T;
declare const operationProperties: readonly ["create", "delete", "deleteMany", "get", "findMany", "update", "updateMany"];
type OperationProperties = typeof operationProperties[number];
export declare function CollectionDecorator(type: Type | string, options?: Collection.DecoratorOptions): ClassDecorator;
export interface CollectionDecorator extends StrictOmit<ResourceDecorator, 'Action'> {
    <T>(type: Type<T> | string, options?: Collection.DecoratorOptions<T>): ClassDecorator;
    Action: (options?: CollectionDecorator.Action.Options) => (<T, K extends keyof T>(target: T, propertyKey: ErrorMessage<Exclude<K, OperationProperties>, `'${string & K}' property is reserved for operation endpoints and can not be used for actions`>) => void) & ActionDecorator;
    Create: typeof CollectionDecorator.Create;
    Delete: typeof CollectionDecorator.Delete;
    DeleteMany: typeof CollectionDecorator.DeleteMany;
    Get: typeof CollectionDecorator.Get;
    FindMany: typeof CollectionDecorator.FindMany;
    Update: typeof CollectionDecorator.Update;
    UpdateMany: typeof CollectionDecorator.UpdateMany;
}
/**
 * @namespace CollectionDecorator
 */
export declare namespace CollectionDecorator {
    interface Metadata extends StrictOmit<OpraSchema.Collection, 'kind' | 'type' | 'operations' | 'actions'> {
        kind: OpraSchema.Collection.Kind;
        name: string;
        type: TypeThunkAsync | string;
        actions?: Record<string, ResourceDecorator.OperationMetadata>;
        operations?: {
            create: Create.Metadata;
            delete: Delete.Metadata;
            deleteMany: DeleteMany.Metadata;
            get: Get.Metadata;
            findMany: FindMany.Metadata;
            update: Update.Metadata;
            updateMany: UpdateMany.Metadata;
        };
    }
    interface FieldDecoratorOptions extends Partial<StrictOmit<OpraSchema.Field, 'type'>> {
        type?: string | OpraSchema.DataType | TypeThunkAsync;
        enum?: EnumType.EnumObject | EnumType.EnumArray;
    }
    /**
     * @namespace Action
     */
    namespace Action {
        interface Metadata extends ResourceDecorator.ActionMetadata {
        }
        interface Options extends ResourceDecorator.ActionOptions {
        }
    }
    /**
     * @namespace Create
     */
    namespace Create {
        interface Metadata extends Combine<ResourceDecorator.OperationMetadata, OpraSchema.Collection.Operations.Create> {
        }
        interface Options extends Combine<ResourceDecorator.OperationOptions, Partial<OpraSchema.Collection.Operations.Create>> {
        }
    }
    /**
     * @namespace Delete
     */
    namespace Delete {
        interface Metadata extends Combine<ResourceDecorator.OperationMetadata, OpraSchema.Collection.Operations.Delete> {
        }
        interface Options extends Combine<ResourceDecorator.OperationOptions, Partial<OpraSchema.Collection.Operations.Delete>> {
        }
    }
    /**
     * @namespace DeleteMany
     */
    namespace DeleteMany {
        interface Metadata extends Combine<ResourceDecorator.OperationMetadata, OpraSchema.Collection.Operations.DeleteMany> {
        }
        interface Options extends Combine<ResourceDecorator.OperationOptions, Partial<OpraSchema.Collection.Operations.DeleteMany>> {
        }
    }
    /**
     * @namespace FindMany
     */
    namespace FindMany {
        interface Metadata extends Combine<ResourceDecorator.OperationMetadata, OpraSchema.Collection.Operations.FindMany> {
        }
        interface Options extends Combine<ResourceDecorator.OperationOptions, Partial<OpraSchema.Collection.Operations.FindMany>> {
        }
    }
    /**
     * @namespace Get
     */
    namespace Get {
        interface Metadata extends Combine<ResourceDecorator.OperationMetadata, OpraSchema.Collection.Operations.Get> {
        }
        interface Options extends Combine<ResourceDecorator.OperationOptions, Partial<OpraSchema.Collection.Operations.Get>> {
        }
    }
    /**
     * @namespace Update
     */
    namespace Update {
        interface Metadata extends Combine<ResourceDecorator.OperationMetadata, OpraSchema.Collection.Operations.Update> {
        }
        interface Options extends Combine<ResourceDecorator.OperationOptions, Partial<OpraSchema.Collection.Operations.Update>> {
        }
    }
    /**
     * @namespace UpdateMany
     */
    namespace UpdateMany {
        interface Metadata extends Combine<ResourceDecorator.OperationMetadata, OpraSchema.Collection.Operations.UpdateMany> {
        }
        interface Options extends Combine<ResourceDecorator.OperationOptions, Partial<OpraSchema.Collection.Operations.UpdateMany>> {
        }
    }
}
export declare namespace CollectionDecorator {
    /**
     * Action PropertyDecorator
     */
    function Action(options: ResourceDecorator.OperationOptions): ActionDecorator;
    /**
     * Create PropertyDecorator
     */
    type CreateDecorator = ((target: Object, propertyKey: 'create') => void) & {
        Parameter: (name: string, optionsOrType?: ResourceDecorator.ParameterOptions | string | Type) => CreateDecorator;
        InputMaxContentSize: (sizeInBytes: number) => CreateDecorator;
        InputPickFields: (...fields: Field.QualifiedName[]) => CreateDecorator;
        InputOmitFields: (...fields: Field.QualifiedName[]) => CreateDecorator;
        InputOverwriteFields: (fields: Record<string, FieldDecoratorOptions>) => CreateDecorator;
        OutputPickFields: (...fields: Field.QualifiedName[]) => CreateDecorator;
        OutputOmitFields: (...fields: Field.QualifiedName[]) => CreateDecorator;
        OutputOverwriteFields: (fields: Record<string, FieldDecoratorOptions>) => CreateDecorator;
    };
    function Create(options?: Create.Options): CreateDecorator;
    /**
     * Delete PropertyDecorator
     */
    type DeleteDecorator = ((target: Object, propertyKey: 'delete') => void) & {
        Parameter: (name: string, optionsOrType?: ResourceDecorator.ParameterOptions | string | Type) => DeleteDecorator;
    };
    function Delete(options?: Delete.Options): DeleteDecorator;
    /**
     * DeleteMany PropertyDecorator
     */
    type DeleteManyDecorator = ((target: Object, propertyKey: 'deleteMany') => void) & {
        Parameter: (name: string, optionsOrType?: ResourceDecorator.ParameterOptions | string | Type) => DeleteManyDecorator;
        Filter: (field: Field.QualifiedName, operators?: OpraFilter.ComparisonOperator[] | string, notes?: string) => DeleteManyDecorator;
    };
    function DeleteMany(options?: DeleteMany.Options): DeleteManyDecorator;
    /**
     * Get PropertyDecorator
     */
    type GetDecorator = ((target: Object, propertyKey: 'get') => void) & {
        Parameter: (name: string, optionsOrType?: ResourceDecorator.ParameterOptions | string | Type) => GetDecorator;
        OutputPickFields: (...fields: Field.QualifiedName[]) => GetDecorator;
        OutputOmitFields: (...fields: Field.QualifiedName[]) => GetDecorator;
        OutputOverwriteFields: (fields: Record<string, FieldDecoratorOptions>) => GetDecorator;
    };
    function Get(options?: Get.Options): GetDecorator;
    /**
     * FindMany PropertyDecorator
     */
    type FindManyDecorator = ((target: Object, propertyKey: 'findMany') => void) & {
        Parameter: (name: string, optionsOrType?: ResourceDecorator.ParameterOptions | string | Type) => FindManyDecorator;
        SortFields: (...fields: Field.QualifiedName[]) => FindManyDecorator;
        DefaultSort: (...fields: Field.QualifiedName[]) => FindManyDecorator;
        Filter: (field: Field.QualifiedName, operators?: OpraFilter.ComparisonOperator[] | string, notes?: string) => FindManyDecorator;
        OutputPickFields: (...fields: Field.QualifiedName[]) => FindManyDecorator;
        OutputOmitFields: (...fields: Field.QualifiedName[]) => FindManyDecorator;
        OutputOverwriteFields: (fields: Record<string, FieldDecoratorOptions>) => FindManyDecorator;
    };
    function FindMany(options?: FindMany.Options): FindManyDecorator;
}
export declare namespace CollectionDecorator {
    type UpdateDecorator = ((target: Object, propertyKey: 'update') => void) & {
        Parameter: (name: string, optionsOrType?: ResourceDecorator.ParameterOptions | string | Type) => UpdateDecorator;
        InputMaxContentSize: (sizeInBytes: number) => UpdateDecorator;
        InputPickFields: (...fields: Field.QualifiedName[]) => UpdateDecorator;
        InputOmitFields: (...fields: Field.QualifiedName[]) => UpdateDecorator;
        InputOverwriteFields: (fields: Record<string, FieldDecoratorOptions>) => UpdateDecorator;
        OutputPickFields: (...fields: Field.QualifiedName[]) => UpdateDecorator;
        OutputOmitFields: (...fields: Field.QualifiedName[]) => UpdateDecorator;
        OutputOverwriteFields: (fields: Record<string, FieldDecoratorOptions>) => UpdateDecorator;
    };
    function Update(options?: Update.Options): UpdateDecorator;
}
export declare namespace CollectionDecorator {
    type UpdateManyDecorator = ((target: Object, propertyKey: 'updateMany') => void) & {
        Parameter: (name: string, optionsOrType?: ResourceDecorator.ParameterOptions | string | Type) => UpdateManyDecorator;
        InputMaxContentSize: (sizeInBytes: number) => UpdateManyDecorator;
        InputPickFields: (...fields: Field.QualifiedName[]) => UpdateManyDecorator;
        InputOmitFields: (...fields: Field.QualifiedName[]) => UpdateManyDecorator;
        InputOverwriteFields: (fields: Record<string, FieldDecoratorOptions>) => UpdateManyDecorator;
        Filter: (field: Field.QualifiedName, operators?: OpraFilter.ComparisonOperator[] | string, notes?: string) => UpdateManyDecorator;
    };
    function UpdateMany(options?: UpdateMany.Options): UpdateManyDecorator;
    function UpdateMany(description?: string): UpdateManyDecorator;
}
export {};
