import { OpraFilter } from '../../filter/index.js';
import { OpraSchema } from '../../schema/index.js';
import type { ApiDocument } from '../api-document.js';
import { ComplexType } from '../data-type/complex-type.js';
import type { Collection } from './collection.js';
import type { Container } from './container.js';
import { CrudResource } from './crud-resource.js';
export declare class CollectionClass extends CrudResource {
    readonly kind: OpraSchema.Resource.Kind;
    readonly type: ComplexType;
    readonly primaryKey: string[];
    constructor(parent: ApiDocument | Container, init: Collection.InitArguments);
    exportSchema(options?: {
        webSafe?: boolean;
    }): OpraSchema.Collection;
    parseKeyValue(value: any): any;
    normalizeFieldNames(fields: string | string[], allowSortSigns?: boolean): string[] | undefined;
    normalizeSortFields(fields: string | string[]): string[] | undefined;
    normalizeFilter(filter: string | OpraFilter.Expression): OpraFilter.Expression | undefined;
}
