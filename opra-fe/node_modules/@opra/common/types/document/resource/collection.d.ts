import { Combine, StrictOmit } from 'ts-gems';
import type { ApiDocument } from '../api-document.js';
import { ComplexType } from '../data-type/complex-type.js';
import { CollectionClass } from './collection-class.js';
import { CollectionDecorator } from './collection-decorator.js';
import type { Container } from './container.js';
import { Resource } from './resource.js';
export interface Collection extends CollectionClass {
}
export interface CollectionConstructor extends CollectionDecorator {
    prototype: CollectionClass;
    new (parent: ApiDocument | Container, init: Collection.InitArguments): CollectionClass;
}
/**
 * @class Collection
 * @decorator Collection
 */
export declare const Collection: CollectionConstructor;
/**
 * @namespace Collection
 */
export declare namespace Collection {
    interface InitArguments extends StrictOmit<Combine<Resource.InitArguments, CollectionDecorator.Metadata>, 'kind' | 'type'> {
        name: string;
        type: ComplexType;
    }
    interface DecoratorOptions<T = any> extends Partial<StrictOmit<CollectionDecorator.Metadata, 'kind' | 'operations' | 'actions' | 'primaryKey'>> {
        primaryKey?: keyof T | (keyof T)[];
    }
    interface Action {
    }
    namespace Action {
    }
    interface Create {
    }
    namespace Create {
    }
    interface Delete {
    }
    namespace Delete {
    }
    interface DeleteMany {
    }
    namespace DeleteMany {
    }
    interface FindMany {
    }
    namespace FindMany {
    }
    interface Get {
    }
    namespace Get {
    }
    interface Update {
    }
    namespace Update {
    }
    interface UpdateMany {
    }
    namespace UpdateMany {
    }
}
