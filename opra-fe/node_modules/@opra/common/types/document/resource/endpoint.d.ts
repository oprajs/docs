import { StrictOmit, Type } from 'ts-gems';
import { ResponsiveMap } from '../../helpers/index.js';
import { OpraSchema } from '../../schema/index.js';
import { DataType } from '../data-type/data-type.js';
import { Parameter } from './parameter.js';
import type { Resource } from './resource';
/**
 *
 * @class Endpoint
 */
export declare abstract class Endpoint {
    readonly resource: Resource;
    readonly name: string;
    abstract readonly kind: 'action' | 'operation';
    description?: string;
    parameters: ResponsiveMap<Parameter>;
    options: any;
    protected constructor(resource: Resource, name: string, init: Endpoint.InitArguments);
    getFullPath(documentPath?: boolean): string;
    defineParameter(name: string, init: Endpoint.ParameterInit): Parameter;
    exportSchema(options?: {
        webSafe?: boolean;
    }): OpraSchema.Endpoint;
}
export declare namespace Endpoint {
    interface InitArguments extends StrictOmit<OpraSchema.Endpoint, 'parameters'> {
        parameters?: Record<string, ParameterInit>;
    }
    type ParameterInit = StrictOmit<Parameter.InitArguments, 'type'> & {
        type?: DataType | string | Type;
    };
}
