import { StrictOmit, Type } from 'ts-gems';
import { ResponsiveMap } from '../../helpers/index.js';
import { OpraSchema } from '../../schema/index.js';
import type { ApiDocument } from '../api-document.js';
import { nodeInspectCustom } from '../utils/inspect.util.js';
import { Action } from './action.js';
import type { Container } from './container.js';
import { CrudOperation } from './crud-operation.js';
import type { ResourceDecorator } from './resource-decorator';
export declare abstract class Resource {
    readonly document: ApiDocument;
    readonly parent?: Container;
    abstract readonly kind: OpraSchema.Resource.Kind;
    readonly name: string;
    description?: string;
    controller?: object;
    ctor?: Type;
    actions: ResponsiveMap<Action>;
    protected constructor(parent: ApiDocument | Container, init: Resource.InitArguments);
    getFullPath(documentPath?: boolean): string;
    exportSchema(options?: {
        webSafe?: boolean;
    }): OpraSchema.ResourceBase;
    toString(): string;
    [nodeInspectCustom](): string;
}
export declare namespace Resource {
    interface InitArguments extends StrictOmit<ResourceDecorator.Metadata, 'kind' | 'operations' | 'actions'> {
        name: string;
        actions?: Record<string, Action.InitArguments>;
        operations?: Record<string, CrudOperation.InitArguments>;
        controller?: object;
        ctor?: Type;
    }
}
