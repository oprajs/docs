import { StrictOmit } from 'ts-gems';
import { OpraSchema } from '../../schema/index.js';
import { TypeThunkAsync } from '../../types.js';
import { EnumType } from '../data-type/enum-type.js';
export interface ResourceDecorator {
    Action: (options?: ResourceDecorator.OperationOptions) => ResourceDecorator;
}
export declare function ResourceDecorator<O extends ResourceDecorator.Options>(kind: OpraSchema.Resource.Kind, meta?: O): ClassDecorator;
/**
 * @namespace ResourceDecorator
 */
export declare namespace ResourceDecorator {
    interface Metadata extends StrictOmit<OpraSchema.ResourceBase, 'actions'> {
        name: string;
        actions?: Record<string, ActionMetadata>;
        operations?: Record<string, OperationMetadata>;
    }
    interface Options extends Partial<StrictOmit<Metadata, 'kind' | 'actions' | 'operations'>> {
    }
    interface ParameterMetadata extends StrictOmit<OpraSchema.Endpoint.Parameter, 'type'> {
        type?: TypeThunkAsync | string;
        enum?: EnumType.EnumObject | EnumType.EnumArray;
    }
    interface ParameterOptions extends Partial<ParameterMetadata> {
    }
    interface OperationMetadata extends StrictOmit<OpraSchema.Endpoint, 'parameters'> {
        parameters: Record<string, ParameterMetadata>;
    }
    interface OperationOptions extends Partial<StrictOmit<OpraSchema.Endpoint, 'parameters'>> {
        parameters?: Record<string, ParameterOptions>;
    }
    interface ActionMetadata extends StrictOmit<OpraSchema.Action, 'parameters' | 'returnType'> {
        parameters: Record<string, ParameterMetadata>;
        returnType?: TypeThunkAsync | string;
    }
    interface ActionOptions extends Partial<StrictOmit<OpraSchema.Action, 'parameters' | 'returnType'>> {
        parameters?: Record<string, ParameterOptions>;
        returnType?: TypeThunkAsync | string;
    }
}
