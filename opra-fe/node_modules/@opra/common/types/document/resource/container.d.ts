import { Combine, StrictOmit } from 'ts-gems';
import type { ApiDocument } from '../api-document.js';
import { ContainerClass } from './container-class.js';
import { ContainerDecorator } from './container-decorator.js';
import type { Resource } from './resource.js';
export interface Container extends ContainerClass {
}
export interface ContainerConstructor extends ContainerDecorator {
    prototype: ContainerClass;
    new (parent: ApiDocument | Container, init: Container.InitArguments): ContainerClass;
}
/**
 * @class Container
 * @decorator Container
 */
export declare const Container: ContainerConstructor;
export declare namespace Container {
    interface InitArguments extends StrictOmit<Combine<Resource.InitArguments, ContainerDecorator.Metadata>, 'kind' | 'resources'> {
        resources?: Resource[];
    }
    interface DecoratorOptions extends Partial<StrictOmit<ContainerDecorator.Metadata, 'kind' | 'actions'>> {
    }
    interface Action {
    }
    namespace Action {
    }
}
