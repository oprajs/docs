import { Type } from 'ts-gems';
import { ResponsiveMap } from '../helpers/index.js';
import { OpraSchema } from '../schema/index.js';
import { ComplexType } from './data-type/complex-type.js';
import { DataType } from './data-type/data-type.js';
import { EnumType } from './data-type/enum-type.js';
import { SimpleType } from './data-type/simple-type.js';
import { DocumentBase } from './document-base.js';
export declare class TypeDocument extends DocumentBase {
    protected _designCtorMap: Map<Function | Type<any>, string>;
    protected _typeIndex: Map<string | object | Type<any>, DataType>;
    protected _typeNsMap: Map<DataType, string>;
    references: ResponsiveMap<TypeDocument>;
    types: ResponsiveMap<DataType>;
    constructor();
    /**
     * Returns DataType instance by name or Constructor. Returns undefined if not found
     * @param nameOrCtor
     * @param silent
     */
    getDataType(nameOrCtor: any, silent: true): DataType | undefined;
    /**
     * Returns DataType instance by name or Constructor. Throws error  if not found
     * @param nameOrCtor
     */
    getDataType(nameOrCtor: any): DataType;
    /**
     * Returns NS of datatype. Returns undefined if not found
     * @param nameOrCtor
     * @param silent
     */
    getDataTypeNs(nameOrCtor: any, silent: true): string | undefined;
    /**
     * Returns NS of datatype. Throws error  if not found
     * @param nameOrCtor
     */
    getDataTypeNs(nameOrCtor: any): string;
    /**
     * Returns ComplexType instance by name or Constructor.
     * Returns undefined if not found
     * Throws error if data type is not a ComplexType
     * @param nameOrCtor
     * @param silent
     */
    getComplexType(nameOrCtor: string | Type, silent: true): ComplexType | undefined;
    /**
     * Returns ComplexType instance by name or Constructor.
     * Throws error undefined if not found or data type is not a ComplexType
     * @param nameOrCtor
     */
    getComplexType(nameOrCtor: string | Type): ComplexType;
    /**
     * Returns SimpleType instance by name or Constructor.
     * Returns undefined if not found
     * Throws error if data type is not a SimpleType
     * @param nameOrCtor
     * @param silent
     */
    getSimpleType(nameOrCtor: string | Type, silent: true): SimpleType | undefined;
    /**
     Returns SimpleType instance by name or Constructor.
     Throws error undefined if not found or data type is not a SimpleType
     * @param nameOrCtor
     */
    getSimpleType(nameOrCtor: string | Type): SimpleType;
    /**
     Returns SimpleType instance by name or Constructor.
     Throws error undefined if not found or data type is not a SimpleType
     * @param nameOrCtor
     */
    getEnumType(nameOrCtor: string | EnumType.EnumObject | EnumType.EnumArray): EnumType;
    /**
     * Export as Opra schema definition object
     */
    exportSchema(options?: {
        webSafe?: boolean;
    }): OpraSchema.TypeDocument;
    invalidate(): void;
}
