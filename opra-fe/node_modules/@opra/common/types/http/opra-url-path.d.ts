declare const nodeInspectCustom: unique symbol;
declare const kLength: unique symbol;
type ResourceKey = Record<string, string | number | boolean | null>;
/**
 * @class OpraURLPath
 */
export declare class OpraURLPath {
    protected [kLength]: number;
    [index: number]: OpraURLPathComponent;
    constructor(...init: (OpraURLPath.ComponentLike | null | undefined)[]);
    get length(): number;
    slice(start?: number, end?: number): OpraURLPath;
    resolve(...items: OpraURLPath.ComponentLike[]): this;
    join(...items: OpraURLPath.ComponentLike[]): OpraURLPath;
    isRelativeTo(basePath: string | OpraURLPath): boolean;
    forEach(callback: (component: OpraURLPathComponent, index: number, _this: this) => void): void;
    values(): IterableIterator<OpraURLPathComponent>;
    toString(): string;
    [nodeInspectCustom](): string;
    [Symbol.iterator](): IterableIterator<OpraURLPathComponent>;
    protected _resolve(items: OpraURLPath.ComponentLike | OpraURLPath.ComponentLike[], join?: boolean): void;
    static join(...items: OpraURLPath.ComponentLike[]): OpraURLPath;
    static resolve(...items: OpraURLPath.ComponentLike[]): OpraURLPath;
    static relative(source: string | OpraURLPath, basePath: string | OpraURLPath): OpraURLPath | undefined;
}
export declare namespace OpraURLPath {
    type ComponentLike = string | OpraURLPath | OpraURLPathComponent | OpraURLPathComponent.Initiator;
}
/**
 *
 * @class OpraURLPathComponent
 */
export declare class OpraURLPathComponent {
    resource: string;
    key?: string | number | ResourceKey;
    args?: Record<string, any>;
    typeCast?: string;
    constructor(init: OpraURLPathComponent.Initiator);
    toString(): string;
    [nodeInspectCustom](): string;
    /**
     * Factory method.
     * @param input
     */
    static parse(input: string): OpraURLPathComponent;
}
export declare namespace OpraURLPathComponent {
    interface Initiator {
        resource: string;
        key?: string | number | ResourceKey;
        args?: Record<string, any>;
        typeCast?: string;
    }
}
export {};
