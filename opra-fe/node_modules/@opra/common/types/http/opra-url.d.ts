import { OpraURLPath } from './opra-url-path.js';
declare const nodeInspectCustom: unique symbol;
declare const kContext: unique symbol;
declare const kPath: unique symbol;
declare const kSearchParams: unique symbol;
export declare class OpraURL {
    protected static kContext: symbol;
    protected static kPath: symbol;
    protected static kParams: symbol;
    protected [kPath]: OpraURLPath;
    protected [kSearchParams]: URLSearchParams;
    protected [kContext]: {
        protocol: string;
        username: string;
        pathname?: string;
        hostname: string;
        port: string;
        hash: string;
        password: string;
        address?: string;
    };
    constructor(input?: string | URL | OpraURL, base?: string | URL | OpraURL);
    get address(): string;
    get host(): string;
    set host(v: string);
    get hostname(): string;
    set hostname(v: string);
    get href(): string;
    get password(): string;
    set password(v: string);
    get port(): string;
    set port(value: string | number);
    get protocol(): string;
    set protocol(v: string);
    get username(): string;
    set username(v: string);
    get origin(): string;
    get path(): OpraURLPath;
    set path(path: OpraURLPath);
    get pathname(): string;
    set pathname(v: string);
    get hash(): string;
    set hash(v: string);
    get search(): string;
    set search(v: string);
    get searchParams(): URLSearchParams;
    set setSearchParams(v: URLSearchParams);
    invalidate(): void;
    join(...items: OpraURLPath.ComponentLike[]): this;
    resolve(...items: OpraURLPath.ComponentLike[]): OpraURL;
    toString(): string;
    protected _parse(input: string): void;
    [nodeInspectCustom](): {
        protocol: string;
        username: string;
        password: string;
        host: string;
        hostname: string;
        origin: string;
        path: OpraURLPath;
        pathname: string;
        search: string;
        hash: string;
    };
}
export {};
