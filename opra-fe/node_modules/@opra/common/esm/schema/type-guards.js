import { ComplexType } from './data-type/complex-type.interface.js';
import { EnumType } from './data-type/enum-type.interface.js';
import { MappedType } from './data-type/mapped-type.interface.js';
import { MixinType } from './data-type/mixin-type.interface.js';
import { SimpleType } from './data-type/simple-type.interface.js';
import { Collection } from './resource/collection.interface.js';
import { Container } from './resource/container.interface.js';
import { Singleton } from './resource/singleton.interface.js';
import { Storage } from './resource/storage.interface.js';
export function isDataType(obj) {
    return obj && typeof obj === 'object' &&
        (obj.kind === ComplexType.Kind ||
            obj.kind === EnumType.Kind ||
            obj.kind === MappedType.Kind ||
            obj.kind === SimpleType.Kind ||
            obj.kind === MixinType.Kind);
}
export function isComplexType(obj) {
    return obj && typeof obj === 'object' && obj.kind === ComplexType.Kind;
}
export function isSimpleType(obj) {
    return obj && typeof obj === 'object' && obj.kind === SimpleType.Kind;
}
export function isMixinType(obj) {
    return obj && typeof obj === 'object' && obj.kind === MixinType.Kind;
}
export function isMappedType(obj) {
    return obj && typeof obj === 'object' && obj.kind === MappedType.Kind;
}
export function isEnumType(obj) {
    return obj && typeof obj === 'object' && obj.kind === EnumType.Kind;
}
export function isResource(obj) {
    return obj && typeof obj === 'object' &&
        (obj.kind === Container.Kind ||
            obj.kind === Collection.Kind ||
            obj.kind === Singleton.Kind ||
            obj.kind === Storage.Kind);
}
export function isCollection(obj) {
    return obj && typeof obj === 'object' && obj.kind === Collection.Kind;
}
export function isSingleton(obj) {
    return obj && typeof obj === 'object' && obj.kind === Singleton.Kind;
}
export function isStorage(obj) {
    return obj && typeof obj === 'object' && obj.kind === Storage.Kind;
}
export function isContainer(obj) {
    return obj && typeof obj === 'object' && obj.kind === Container.Kind;
}
