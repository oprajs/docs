import { omitUndefined } from '../../helpers/index.js';
import { OpraSchema } from '../../schema/index.js';
import { ComplexTypeClass } from './complex-type-class.js';
export class MappedTypeClass extends ComplexTypeClass {
    constructor(document, init) {
        super(document, init);
        this.kind = OpraSchema.MappedType.Kind;
        const own = this.own;
        own.pick = init.pick;
        own.omit = init.omit;
        own.partial = init.partial;
        this.kind = OpraSchema.MappedType.Kind;
        this.pick = own.pick;
        this.omit = own.omit;
        this.partial = own.partial;
        const isInheritedPredicate = getIsInheritedPredicateFn(init.pick, init.omit);
        for (const fieldName of this.fields.keys()) {
            if (!isInheritedPredicate(fieldName)) {
                this.fields.delete(fieldName);
            }
            if (this.partial === true || (Array.isArray(this.partial) && this.partial.includes(fieldName))) {
                const f = this.fields.get(fieldName);
                if (f)
                    f.required = false;
            }
        }
    }
    exportSchema() {
        const out = super.exportSchema();
        Object.assign(out, omitUndefined({
            pick: this.own.pick,
            omit: this.own.omit,
            partial: this.own.partial
        }));
        return out;
    }
}
export function getIsInheritedPredicateFn(pick, omit) {
    const pickKeys = pick?.map(x => String(x).toLowerCase());
    const omitKeys = omit?.map(x => String(x).toLowerCase());
    return (propertyName) => {
        if (omitKeys && omitKeys.includes(propertyName.toLowerCase()))
            return false;
        if (pickKeys)
            return pickKeys.includes(propertyName.toLowerCase());
        return true;
    };
}
