import { vg } from 'valgen';
import { omitUndefined } from '../../helpers/index.js';
import { OpraSchema } from '../../schema/index.js';
import { DATATYPE_METADATA } from '../constants.js';
import { DataType } from './data-type.js';
export class EnumTypeClass extends DataType {
    constructor(document, init) {
        super(document, init);
        this.kind = OpraSchema.EnumType.Kind;
        this.enumObject = init.enumObject;
        this.base = init.base;
        this.ownValues = { ...init.values };
        this.values = { ...this.base?.values, ...this.ownValues };
        this.decode = vg.isEnum(Object.keys(this.values));
        this.encode = vg.isEnum(Object.keys(this.values));
    }
    isTypeOf(t) {
        return t[DATATYPE_METADATA] &&
            t[DATATYPE_METADATA] === this.enumObject?.[DATATYPE_METADATA];
    }
    exportSchema() {
        const out = super.exportSchema();
        out.values = {};
        Object.entries(this.values).forEach(([k, i]) => {
            out.values[k] = omitUndefined({ key: i.key, description: i.description });
        });
        return out;
    }
    generateCodec(codec) {
        if (codec === 'encode')
            return this.encode;
        else
            return this.decode;
    }
}
