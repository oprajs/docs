import { omitUndefined } from '../../helpers/index.js';
import { OpraSchema } from '../../schema/index.js';
import { DATATYPE_METADATA } from '../constants.js';
export function FieldDecorator(options) {
    return function (target, propertyKey) {
        if (typeof propertyKey !== 'string')
            throw new TypeError(`Symbol properties can't be used as a field`);
        const metadata = Reflect.getOwnMetadata(DATATYPE_METADATA, target.constructor) || {};
        metadata.kind = OpraSchema.ComplexType.Kind;
        metadata.fields = metadata.fields || {};
        const designType = Reflect.getMetadata('design:type', target, propertyKey);
        const elemMeta = metadata.fields[propertyKey] = {
            ...options,
            designType
        };
        if (designType === Array) {
            elemMeta.isArray = true;
            delete elemMeta.designType;
        }
        Reflect.defineMetadata(DATATYPE_METADATA, omitUndefined(metadata), target.constructor);
    };
}
