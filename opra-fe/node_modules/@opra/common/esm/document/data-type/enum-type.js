import 'reflect-metadata';
import merge from 'putil-merge';
import { omitUndefined } from '../../helpers/index.js';
import { OpraSchema } from '../../schema/index.js';
import { DATATYPE_METADATA } from '../constants.js';
import { EnumTypeClass } from './enum-type-class.js';
/**
 * @class EnumType
 */
export const EnumType = function (...args) {
    // Injector
    if (!this) {
        const [enumSource, options] = args;
        let values = {};
        if (Array.isArray(enumSource)) {
            values = {};
            enumSource.forEach(k => {
                const description = options?.meanings?.[k];
                values[k] = omitUndefined({ description });
            });
        }
        else {
            Object.keys(enumSource).forEach(k => {
                const description = options?.meanings?.[k];
                values[enumSource[k]] = omitUndefined({ key: k, description });
            });
        }
        const metadata = {
            kind: OpraSchema.EnumType.Kind,
            values,
            base: options?.base,
            name: options?.name,
            description: options?.description
        };
        Object.defineProperty(enumSource, DATATYPE_METADATA, {
            value: metadata,
            enumerable: false,
            configurable: true,
            writable: true
        });
        return metadata;
    }
    // Constructor
    const [document, init] = args;
    merge(this, new EnumTypeClass(document, init), { descriptor: true });
    return;
};
EnumType.prototype = EnumTypeClass.prototype;
