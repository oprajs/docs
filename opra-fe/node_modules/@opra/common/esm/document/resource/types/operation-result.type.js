import { __decorate } from "tslib";
import { ComplexType } from '../../data-type/complex-type.js';
import { ApiField } from '../../data-type/field.js';
let OperationResult = class OperationResult {
    constructor(init) {
        if (init)
            Object.assign(this, init);
    }
};
__decorate([
    ApiField()
], OperationResult.prototype, "context", void 0);
__decorate([
    ApiField()
], OperationResult.prototype, "contextUrl", void 0);
__decorate([
    ApiField()
], OperationResult.prototype, "type", void 0);
__decorate([
    ApiField()
], OperationResult.prototype, "typeUrl", void 0);
__decorate([
    ApiField()
], OperationResult.prototype, "affected", void 0);
__decorate([
    ApiField()
], OperationResult.prototype, "count", void 0);
__decorate([
    ApiField()
], OperationResult.prototype, "totalMatches", void 0);
__decorate([
    ApiField({ type: 'any' })
], OperationResult.prototype, "payload", void 0);
__decorate([
    ApiField({ type: 'object' })
], OperationResult.prototype, "errors", void 0);
OperationResult = __decorate([
    ComplexType({
        description: 'Operation result'
    })
], OperationResult);
export { OperationResult };
