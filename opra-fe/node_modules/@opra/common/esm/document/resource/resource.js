import { ResponsiveMap } from '../../helpers/index.js';
import { omitUndefined } from '../../helpers/object-utils.js';
import { colorFgMagenta, colorFgYellow, colorReset, nodeInspectCustom } from '../utils/inspect.util.js';
import { Action } from './action.js';
export class Resource {
    constructor(parent, init) {
        this.actions = new ResponsiveMap();
        if (parent instanceof Resource) {
            this.document = parent.document;
            this.parent = parent;
        }
        else
            this.document = parent;
        this.name = init.name;
        this.description = init.description;
        this.controller = init.controller;
        if (this.controller) {
            this.ctor = Object.getPrototypeOf(this.controller).constructor;
        }
        else
            this.ctor = init.ctor;
        if (init.actions) {
            for (const [name, meta] of Object.entries(init.actions)) {
                this.actions.set(name, new Action(this, name, meta));
            }
        }
    }
    getFullPath(documentPath) {
        if (this === this.document.root)
            return documentPath ? '/root' : '/';
        let out = this.parent?.getFullPath(documentPath);
        if (!out?.endsWith('/'))
            out += '/';
        return out + (documentPath ? 'resources/' : '') + this.name;
    }
    exportSchema(options) {
        const schema = omitUndefined({
            kind: this.kind,
            description: this.description,
        });
        if (this.actions.size) {
            schema.actions = {};
            for (const action of this.actions.values()) {
                schema.actions[action.name] = action.exportSchema(options);
            }
        }
        return schema;
    }
    toString() {
        return `[${Object.getPrototypeOf(this).constructor.name} ${this.name || '#Embedded'}]`;
    }
    [nodeInspectCustom]() {
        return `[${colorFgYellow + Object.getPrototypeOf(this).constructor.name + colorReset}` +
            ` ${colorFgMagenta + this.name + colorReset}]`;
    }
}
