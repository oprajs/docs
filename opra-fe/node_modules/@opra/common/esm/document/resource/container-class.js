import { NotAcceptableError, ResourceNotAvailableError } from '../../exception/index.js';
import { ResponsiveMap } from '../../helpers/index.js';
import { OpraSchema } from '../../schema/index.js';
import { Resource } from './resource.js';
const PATH_PREFIX_PATTERN = /^(\/*)(.+)$/;
export class ContainerClass extends Resource {
    constructor(owner, init) {
        super(owner instanceof ContainerClass ? owner.document : owner, init);
        this.kind = OpraSchema.Container.Kind;
        this.resources = new ResponsiveMap();
        this.parent = owner instanceof ContainerClass ? owner : undefined;
    }
    exportSchema(options) {
        const schema = super.exportSchema(options);
        if (this.resources.size) {
            const resources = schema.resources = {};
            for (const [name, r] of this.resources.entries()) {
                resources[name] = r.exportSchema(options);
            }
        }
        return schema;
    }
    getResource(path, silent) {
        let resource;
        path = PATH_PREFIX_PATTERN.exec(path)?.[2] || path;
        if (path.includes('/')) {
            const arr = path.split('/');
            let i;
            const l = arr.length;
            let container = this;
            for (i = 0; i < l; i++) {
                resource = container.resources.get(arr[i]);
                if (resource instanceof ContainerClass)
                    container = resource;
                else
                    break;
            }
            // If no resource found or walking through path not completed
            if (!resource || i < l - 1)
                resource = undefined;
        }
        else
            resource = this.resources.get(path);
        if (resource || silent)
            return resource;
        throw new ResourceNotAvailableError(path);
    }
    getContainer(path, silent) {
        const t = this.getResource(path);
        if (!t && silent)
            return;
        if (t && t.kind === OpraSchema.Container.Kind)
            return t;
        throw new NotAcceptableError(`Resource type "${t.name}" is not a Container`);
    }
    getCollection(path, silent) {
        const t = this.getResource(path);
        if (!t && silent)
            return;
        if (t && t.kind === OpraSchema.Collection.Kind)
            return t;
        throw new NotAcceptableError(`Resource type "${t.name}" is not a Collection`);
    }
    getSingleton(path, silent) {
        const t = this.getResource(path);
        if (!t && silent)
            return;
        if (t && t.kind === OpraSchema.Singleton.Kind)
            return t;
        throw new NotAcceptableError(`Resource type "${t.name}" is not a Singleton`);
    }
    getStorage(path, silent) {
        const t = this.getResource(path);
        if (!t && silent)
            return;
        if (t && t.kind === OpraSchema.Storage.Kind)
            return t;
        throw new NotAcceptableError(`Resource type "${t.name}" is not a Storage`);
    }
}
