import omit from 'lodash.omit';
import merge from 'putil-merge';
import { RESOURCE_METADATA } from '../constants.js';
export function ResourceDecorator(kind, meta) {
    const namePattern = new RegExp(`^(.*)(${kind}|Resource|Controller)$`);
    return function (target) {
        let name = meta?.name;
        if (!name) {
            name = namePattern.exec(target.name)?.[1] || target.name;
            // Containers may start with lowercase
            if (kind === 'Container')
                name = name.charAt(0).toLowerCase() + name.substring(1);
        }
        const metadata = { kind, name };
        const baseMetadata = Reflect.getOwnMetadata(RESOURCE_METADATA, Object.getPrototypeOf(target));
        if (baseMetadata)
            merge(metadata, baseMetadata, { deep: true });
        const oldMetadata = Reflect.getOwnMetadata(RESOURCE_METADATA, target);
        if (oldMetadata)
            merge(metadata, oldMetadata, { deep: true });
        merge(metadata, {
            kind,
            name,
            ...omit(meta, ['kind', 'name', 'controller'])
        }, { deep: true });
        Reflect.defineMetadata(RESOURCE_METADATA, metadata, target);
    };
}
