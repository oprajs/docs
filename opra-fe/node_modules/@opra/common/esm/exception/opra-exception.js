import { omitUndefined } from '../helpers/index.js';
import { i18n } from '../i18n/index.js';
/**
 * Defines the base Opra exception, which is handled by the default Exceptions Handler.
 */
export class OpraException extends Error {
    constructor(issue, arg1, arg2) {
        super('Unknown error');
        this.status = 500;
        let cause = arg1 && arg1 instanceof Error ? arg1 : undefined;
        this.status = (typeof arg1 === 'number' ? arg1 : Number(arg2)) || 500;
        if (issue instanceof Error)
            cause = issue;
        // noinspection SuspiciousTypeOfGuard
        if (cause && cause instanceof Error) {
            this.cause = cause;
            if (cause.stack)
                this.stack = cause.stack;
        }
        if (typeof issue === 'string')
            this.initString(issue);
        else if (issue instanceof Error)
            this.initError(issue);
        else
            this.init(issue);
        this.message = this.message || this.constructor.name;
    }
    setStatus(status) {
        this.status = status;
        return this;
    }
    toString() {
        return i18n.deep(this.message);
    }
    toJSON() {
        const env = process.env.NODE_ENV;
        return omitUndefined({
            message: this.message,
            severity: this.severity,
            system: this.system,
            code: this.code,
            details: this.details,
            stack: env === 'dev' || env === 'development' || env === 'test'
                ? this.stack?.split('\n') : undefined
        }, true);
    }
    init(issue) {
        this.message = issue?.message || this.constructor.name;
        this.severity = issue?.severity || 'error';
        if (issue) {
            this.system = issue.system;
            this.code = issue.code;
            this.details = issue.details;
        }
    }
    initString(issue) {
        this.init({
            message: String(issue || '') || this.constructor.name,
            severity: 'error',
            code: this.constructor.name
        });
    }
    initError(issue) {
        if (typeof issue.status === 'number')
            this.status = issue.status;
        else if (typeof issue.getStatus === 'function')
            this.status = issue.getStatus();
        this.init({
            message: issue.message,
            severity: issue.severity || 'error',
            code: issue.code || (issue.constructor.name)
        });
    }
}
