import isPlainObject from 'putil-isplainobject';
import merge from 'putil-merge';
import { DATATYPE_METADATA } from '../document/constants.js';
export function cloneObject(obj, jsonOnly) {
    return merge({}, obj, {
        deep: (v) => isPlainObject(v) && !v[DATATYPE_METADATA],
        filter: (source, key) => {
            const v = source[key];
            return v != null &&
                !jsonOnly || (typeof v !== 'function' &&
                (typeof v !== 'object' || isPlainObject(v) || Array.isArray(v)));
        }
    });
}
export function omitUndefined(obj, recursive) {
    if (!(obj && typeof obj === 'object'))
        return obj;
    for (const k of Object.keys(obj)) {
        if (obj[k] === undefined)
            delete obj[k];
        else if (recursive && typeof obj[k] === 'object')
            omitUndefined(obj[k]);
    }
    return obj;
}
export function omitNullish(obj, recursive) {
    if (!(obj && typeof obj === 'object'))
        return obj;
    for (const k of Object.keys(obj)) {
        if (obj[k] == null)
            delete obj[k];
        else if (recursive && isPlainObject(obj[k]))
            omitNullish(obj[k]);
    }
    return obj;
}
