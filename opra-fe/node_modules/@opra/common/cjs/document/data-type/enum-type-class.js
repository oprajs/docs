"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnumTypeClass = void 0;
const valgen_1 = require("valgen");
const index_js_1 = require("../../helpers/index.js");
const index_js_2 = require("../../schema/index.js");
const constants_js_1 = require("../constants.js");
const data_type_js_1 = require("./data-type.js");
class EnumTypeClass extends data_type_js_1.DataType {
    constructor(document, init) {
        super(document, init);
        this.kind = index_js_2.OpraSchema.EnumType.Kind;
        this.enumObject = init.enumObject;
        this.base = init.base;
        this.ownValues = { ...init.values };
        this.values = { ...this.base?.values, ...this.ownValues };
        this.decode = valgen_1.vg.isEnum(Object.keys(this.values));
        this.encode = valgen_1.vg.isEnum(Object.keys(this.values));
    }
    isTypeOf(t) {
        return t[constants_js_1.DATATYPE_METADATA] &&
            t[constants_js_1.DATATYPE_METADATA] === this.enumObject?.[constants_js_1.DATATYPE_METADATA];
    }
    exportSchema() {
        const out = super.exportSchema();
        out.values = {};
        Object.entries(this.values).forEach(([k, i]) => {
            out.values[k] = (0, index_js_1.omitUndefined)({ key: i.key, description: i.description });
        });
        return out;
    }
    generateCodec(codec) {
        if (codec === 'encode')
            return this.encode;
        else
            return this.decode;
    }
}
exports.EnumTypeClass = EnumTypeClass;
