"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIsInheritedPredicateFn = exports.MappedTypeClass = void 0;
const index_js_1 = require("../../helpers/index.js");
const index_js_2 = require("../../schema/index.js");
const complex_type_class_js_1 = require("./complex-type-class.js");
class MappedTypeClass extends complex_type_class_js_1.ComplexTypeClass {
    constructor(document, init) {
        super(document, init);
        this.kind = index_js_2.OpraSchema.MappedType.Kind;
        const own = this.own;
        own.pick = init.pick;
        own.omit = init.omit;
        own.partial = init.partial;
        this.kind = index_js_2.OpraSchema.MappedType.Kind;
        this.pick = own.pick;
        this.omit = own.omit;
        this.partial = own.partial;
        const isInheritedPredicate = getIsInheritedPredicateFn(init.pick, init.omit);
        for (const fieldName of this.fields.keys()) {
            if (!isInheritedPredicate(fieldName)) {
                this.fields.delete(fieldName);
            }
            if (this.partial === true || (Array.isArray(this.partial) && this.partial.includes(fieldName))) {
                const f = this.fields.get(fieldName);
                if (f)
                    f.required = false;
            }
        }
    }
    exportSchema() {
        const out = super.exportSchema();
        Object.assign(out, (0, index_js_1.omitUndefined)({
            pick: this.own.pick,
            omit: this.own.omit,
            partial: this.own.partial
        }));
        return out;
    }
}
exports.MappedTypeClass = MappedTypeClass;
function getIsInheritedPredicateFn(pick, omit) {
    const pickKeys = pick?.map(x => String(x).toLowerCase());
    const omitKeys = omit?.map(x => String(x).toLowerCase());
    return (propertyName) => {
        if (omitKeys && omitKeys.includes(propertyName.toLowerCase()))
            return false;
        if (pickKeys)
            return pickKeys.includes(propertyName.toLowerCase());
        return true;
    };
}
exports.getIsInheritedPredicateFn = getIsInheritedPredicateFn;
