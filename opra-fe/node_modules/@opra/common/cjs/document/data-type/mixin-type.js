"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MixinType = void 0;
const tslib_1 = require("tslib");
require("reflect-metadata");
const putil_merge_1 = tslib_1.__importDefault(require("putil-merge"));
const index_js_1 = require("../../helpers/index.js");
const index_js_2 = require("../../schema/index.js");
const constants_js_1 = require("../constants.js");
const mixin_type_class_js_1 = require("./mixin-type-class.js");
/**
 * @class MixinType
 */
exports.MixinType = function (...args) {
    // Constructor
    if (this) {
        const [document, init] = args;
        (0, putil_merge_1.default)(this, new mixin_type_class_js_1.MixinTypeClass(document, init), { descriptor: true });
        return;
    }
    // MixinType helper
    // Filter undefined items
    const clasRefs = [...args].filter(x => !!x);
    if (!clasRefs.length)
        throw new TypeError('No Class has been provided');
    if (clasRefs.length === 1)
        return clasRefs[0];
    class MixinClass {
        constructor() {
            for (const c of clasRefs)
                (0, index_js_1.inheritPropertyInitializers)(this, c);
        }
    }
    const metadata = {
        kind: index_js_2.OpraSchema.MixinType.Kind,
        types: []
    };
    Reflect.defineMetadata(constants_js_1.DATATYPE_METADATA, metadata, MixinClass);
    for (const c of clasRefs) {
        const itemMeta = Reflect.getMetadata(constants_js_1.DATATYPE_METADATA, c);
        if (!(itemMeta && (itemMeta.kind === index_js_2.OpraSchema.ComplexType.Kind || itemMeta.kind === index_js_2.OpraSchema.MixinType.Kind ||
            itemMeta.kind === index_js_2.OpraSchema.MappedType.Kind)))
            throw new TypeError(`Class "${c.name}" is not a ${index_js_2.OpraSchema.ComplexType.Kind}, ${index_js_2.OpraSchema.MixinType.Kind} or ${index_js_2.OpraSchema.MappedType.Kind}`);
        metadata.types.push(c);
        (0, index_js_1.mergePrototype)(exports.MixinType.prototype, c.prototype);
    }
    exports.MixinType._applyMixin(MixinClass, ...clasRefs);
    return MixinClass;
};
exports.MixinType.prototype = mixin_type_class_js_1.MixinTypeClass.prototype;
exports.MixinType._applyMixin = () => void 0;
