"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldClass = void 0;
const valgen_1 = require("valgen");
const index_js_1 = require("../../helpers/index.js");
class FieldClass {
    constructor(owner, init) {
        this.owner = owner;
        this.origin = init.origin || owner;
        this.type = init.type;
        this.designType = init.designType;
        this.name = init.name;
        this.description = init.description;
        this.isArray = init.isArray;
        this.default = init.default;
        this.fixed = init.fixed;
        this.required = init.required;
        this.readonly = init.readonly;
        this.writeonly = init.writeonly;
        this.exclusive = init.exclusive;
        this.translatable = init.translatable;
        this.deprecated = init.deprecated;
        this.examples = init.examples;
        this.pattern = init.pattern ?
            (init.pattern instanceof RegExp ? init.pattern : new RegExp(init.pattern)) : undefined;
        this.partialUpdate = init.partialUpdate;
    }
    exportSchema(options) {
        const isEmbedded = !this.type?.name ||
            (this.type?.kind === 'ComplexType' && this.type.isEmbedded);
        return (0, index_js_1.omitUndefined)({
            type: this.type
                ? (isEmbedded ? this.type.exportSchema(options) : this.type.name)
                : undefined,
            description: this.description,
            isArray: this.isArray,
            default: this.default,
            fixed: this.fixed,
            required: this.required,
            readonly: this.readonly,
            writeonly: this.writeonly,
            exclusive: this.exclusive,
            translatable: this.translatable,
            deprecated: this.deprecated,
            examples: this.examples,
            pattern: this.pattern ? String(this.pattern) : undefined,
            partialUpdate: this.partialUpdate,
        });
    }
    generateCodec(codec, options) {
        if (options?.operation === 'read' && this.writeonly)
            return valgen_1.isUndefined;
        if (options?.operation === 'write' && this.readonly)
            return valgen_1.isUndefined;
        let fn = this.type.generateCodec(codec, {
            ...options,
            designType: this.designType,
            partial: options?.partial && (this.partialUpdate || !this.isArray)
        });
        if (this.pattern)
            fn = valgen_1.vg.allOf(fn, valgen_1.vg.isRegExp(this.pattern));
        if (this.isArray)
            fn = valgen_1.vg.isArray(fn);
        return !options?.partial && this.required ? valgen_1.vg.required(fn) : valgen_1.vg.optional(fn);
    }
}
exports.FieldClass = FieldClass;
