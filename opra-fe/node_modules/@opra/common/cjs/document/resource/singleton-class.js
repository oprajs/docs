"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SingletonClass = void 0;
const index_js_1 = require("../../schema/index.js");
const crud_resource_js_1 = require("./crud-resource.js");
class SingletonClass extends crud_resource_js_1.CrudResource {
    constructor(parent, init) {
        super(parent, init);
        this.kind = index_js_1.OpraSchema.Singleton.Kind;
        this.type = init.type;
        // ------------------
        let endpoint = this.operations.get('create');
        if (endpoint) {
            endpoint.defineParameter('pick', { type: 'string', isArray: true, isBuiltin: true });
            endpoint.defineParameter('omit', { type: 'string', isArray: true, isBuiltin: true });
            endpoint.defineParameter('include', { type: 'string', isArray: true, isBuiltin: true });
            endpoint.decodeInput = this.type.generateCodec('decode', {
                partial: true,
                pick: endpoint.options.inputPickFields,
                omit: endpoint.options.inputOmitFields,
                operation: 'write',
                overwriteFields: endpoint.inputOverwriteFields
            });
            endpoint.returnType = this.type;
            endpoint.encodeReturning = endpoint.returnType.generateCodec('encode', {
                partial: true,
                pick: endpoint.options.outputPickFields,
                omit: endpoint.options.outputOmitFields,
                operation: 'read',
                overwriteFields: endpoint.outputOverwriteFields
            });
        }
        // ------------------
        endpoint = this.operations.get('get');
        if (endpoint) {
            endpoint.defineParameter('pick', { type: 'string', isArray: true, isBuiltin: true });
            endpoint.defineParameter('omit', { type: 'string', isArray: true, isBuiltin: true });
            endpoint.defineParameter('include', { type: 'string', isArray: true, isBuiltin: true });
            endpoint.returnType = this.type;
            endpoint.encodeReturning = endpoint.returnType.generateCodec('encode', {
                partial: true,
                pick: endpoint.options.outputPickFields,
                omit: endpoint.options.outputOmitFields,
                operation: 'read',
                overwriteFields: endpoint.outputOverwriteFields
            });
        }
        // ------------------
        endpoint = this.operations.get('update');
        if (endpoint) {
            endpoint.defineParameter('pick', { type: 'string', isArray: true, isBuiltin: true });
            endpoint.defineParameter('omit', { type: 'string', isArray: true, isBuiltin: true });
            endpoint.defineParameter('include', { type: 'string', isArray: true, isBuiltin: true });
            endpoint.decodeInput = this.type.generateCodec('decode', {
                pick: endpoint.options.inputPickFields,
                omit: endpoint.options.inputOmitFields,
                operation: 'write',
                overwriteFields: endpoint.inputOverwriteFields
            });
            endpoint.returnType = this.type;
            endpoint.encodeReturning = endpoint.returnType.generateCodec('encode', {
                partial: true,
                pick: endpoint.options.outputPickFields,
                omit: endpoint.options.outputOmitFields,
                operation: 'read',
                overwriteFields: endpoint.outputOverwriteFields
            });
        }
    }
    getOperation(name) {
        return super.getOperation(name);
    }
    exportSchema(options) {
        return {
            ...super.exportSchema(options),
            type: this.type.name || 'any'
        };
    }
    normalizeFieldNames(path) {
        return this.type.normalizeFieldNames(path);
    }
}
exports.SingletonClass = SingletonClass;
