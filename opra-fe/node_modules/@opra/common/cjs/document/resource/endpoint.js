"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Endpoint = void 0;
const index_js_1 = require("../../helpers/index.js");
const data_type_js_1 = require("../data-type/data-type.js");
const parameter_js_1 = require("./parameter.js");
/**
 *
 * @class Endpoint
 */
class Endpoint {
    constructor(resource, name, init) {
        this.resource = resource;
        this.name = name;
        this.options = {};
        Object.assign(this, init);
        this.parameters = new index_js_1.ResponsiveMap();
        if (init.parameters) {
            for (const [n, p] of Object.entries(init.parameters)) {
                this.defineParameter(n, p);
            }
        }
    }
    getFullPath(documentPath) {
        return this.resource.getFullPath(documentPath) +
            (this.kind === 'action' ? (documentPath ? '/actions/' : '/') + this.name : '');
    }
    defineParameter(name, init) {
        const type = init.type && init.type instanceof data_type_js_1.DataType
            ? init.type : this.resource.document.getDataType(init.type || 'any');
        const prm = new parameter_js_1.Parameter(name, {
            ...init,
            type
        });
        this.parameters.set(prm.name, prm);
        return prm;
    }
    exportSchema(options) {
        const schema = (0, index_js_1.omitUndefined)({
            description: this.description
        });
        if (Object.keys(this.options).length)
            schema.options = { ...this.options };
        if (this.parameters.size) {
            let i = 0;
            const parameters = {};
            for (const [name, param] of this.parameters.entries()) {
                if (!param.isBuiltin) {
                    parameters[name] = param.exportSchema(options);
                    i++;
                }
            }
            if (i)
                schema.parameters = parameters;
        }
        return schema;
    }
}
exports.Endpoint = Endpoint;
