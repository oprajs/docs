"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrudOperation = void 0;
const valgen_1 = require("valgen");
const data_type_js_1 = require("../data-type/data-type.js");
const field_js_1 = require("../data-type/field.js");
const endpoint_js_1 = require("./endpoint.js");
/**
 *
 * @class CrudOperation
 */
class CrudOperation extends endpoint_js_1.Endpoint {
    constructor(resource, name, init) {
        super(resource, name, init);
        this.resource = resource;
        this.name = name;
        this.kind = 'operation';
        this.decodeInput = valgen_1.vg.isAny();
        this.encodeReturning = valgen_1.vg.isAny();
        if (init.returnType)
            this.returnType = init.returnType instanceof data_type_js_1.DataType
                ? init.returnType : this.resource.document.getDataType(init.returnType);
        this.encodeReturning = this.returnType?.generateCodec('encode', { operation: 'read', partial: true }) || valgen_1.vg.isAny();
        this.inputOverwriteFields = init.options?.inputOverwriteFields;
        this.outputOverwriteFields = init.options?.outputOverwriteFields;
    }
    exportSchema(options) {
        const schema = super.exportSchema(options);
        if (this.returnType)
            schema.returnType = this.returnType.name && !this.returnType.isEmbedded ?
                this.returnType.name : this.returnType.exportSchema(options);
        if (this.inputOverwriteFields) {
            const trg = schema.options.inputOverwriteFields = {};
            Object.keys(this.inputOverwriteFields)
                .forEach(([k, o]) => {
                trg[k] = field_js_1.ApiField.prototype.exportSchema.call(o, options);
            });
        }
        if (this.outputOverwriteFields) {
            const trg = schema.options.outputOverwriteFields = {};
            Object.keys(this.outputOverwriteFields)
                .forEach(([k, o]) => {
                trg[k] = field_js_1.ApiField.prototype.exportSchema.call(o, options);
            });
        }
        return schema;
    }
}
exports.CrudOperation = CrudOperation;
