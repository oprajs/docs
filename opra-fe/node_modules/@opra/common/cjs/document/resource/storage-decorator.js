"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageDecorator = void 0;
const index_js_1 = require("../../schema/index.js");
const action_decorator_js_1 = require("./action-decorator.js");
const crud_operation_decorator_js_1 = require("./crud-operation-decorator.js");
const resource_decorator_js_1 = require("./resource-decorator.js");
const operationProperties = ['delete', 'get', 'post'];
function StorageDecorator(options) {
    return (0, resource_decorator_js_1.ResourceDecorator)(index_js_1.OpraSchema.Storage.Kind, options);
}
exports.StorageDecorator = StorageDecorator;
Object.assign(StorageDecorator, resource_decorator_js_1.ResourceDecorator);
/*
 * Action PropertyDecorator
 */
(function (StorageDecorator) {
    /**
     * Action PropertyDecorator
     */
    function Action(options) {
        const list = [];
        return (0, action_decorator_js_1.createActionDecorator)(options, operationProperties, list);
    }
    StorageDecorator.Action = Action;
    function Delete(options) {
        const list = [];
        return (0, crud_operation_decorator_js_1.createOperationDecorator)('delete', options, list);
    }
    StorageDecorator.Delete = Delete;
    function Get(options) {
        const list = [];
        return (0, crud_operation_decorator_js_1.createOperationDecorator)('get', options, list);
    }
    StorageDecorator.Get = Get;
    function Post(options) {
        const list = [];
        const decorator = (0, crud_operation_decorator_js_1.createOperationDecorator)('post', options, list);
        decorator.MaxFields = (amount) => {
            list.push(operationMeta => operationMeta.options.maxFields = amount);
            return decorator;
        };
        decorator.MaxFieldSize = (amount) => {
            list.push(operationMeta => operationMeta.options.maxFieldsSize = amount);
            return decorator;
        };
        decorator.MaxFiles = (amount) => {
            list.push(operationMeta => operationMeta.options.maxFiles = amount);
            return decorator;
        };
        decorator.MaxFileSize = (sizeInBytes) => {
            list.push(operationMeta => operationMeta.options.maxFileSize = sizeInBytes);
            return decorator;
        };
        decorator.MaxTotalFileSize = (sizeInBytes) => {
            list.push(operationMeta => operationMeta.options.maxTotalFileSize = sizeInBytes);
            return decorator;
        };
        decorator.MinFileSize = (sizeInBytes) => {
            list.push(operationMeta => operationMeta.options.minFileSize = sizeInBytes);
            return decorator;
        };
        decorator.Returns = (t) => {
            list.push(operationMeta => operationMeta.returnType = t);
            return decorator;
        };
        return decorator;
    }
    StorageDecorator.Post = Post;
})(StorageDecorator || (exports.StorageDecorator = StorageDecorator = {}));
