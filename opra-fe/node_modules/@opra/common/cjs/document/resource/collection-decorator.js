"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectionDecorator = void 0;
const index_js_1 = require("../../helpers/index.js");
const index_js_2 = require("../../schema/index.js");
const action_decorator_js_1 = require("./action-decorator.js");
const crud_operation_decorator_js_1 = require("./crud-operation-decorator.js");
const resource_decorator_js_1 = require("./resource-decorator.js");
const operationProperties = ['create', 'delete', 'deleteMany', 'get', 'findMany', 'update', 'updateMany'];
function CollectionDecorator(type, options) {
    return (0, resource_decorator_js_1.ResourceDecorator)(index_js_2.OpraSchema.Collection.Kind, { ...options, type });
}
exports.CollectionDecorator = CollectionDecorator;
Object.assign(CollectionDecorator, resource_decorator_js_1.ResourceDecorator);
/*
 * Action PropertyDecorator
 */
(function (CollectionDecorator) {
    /**
     * Action PropertyDecorator
     */
    function Action(options) {
        const list = [];
        return (0, action_decorator_js_1.createActionDecorator)(options, operationProperties, list);
    }
    CollectionDecorator.Action = Action;
    function Create(options) {
        const list = [];
        const decorator = (0, crud_operation_decorator_js_1.createOperationDecorator)('create', options, list);
        decorator.InputMaxContentSize = (sizeInBytes) => {
            list.push(operationMeta => operationMeta.options.inputMaxContentSize = sizeInBytes);
            return decorator;
        };
        decorator.InputPickFields = (...fields) => {
            list.push(operationMeta => operationMeta.options.inputPickFields = fields);
            return decorator;
        };
        decorator.InputOmitFields = (...fields) => {
            list.push(operationMeta => operationMeta.options.inputOmitFields = fields);
            return decorator;
        };
        decorator.InputOverwriteFields = (fields) => {
            list.push(operationMeta => operationMeta.options.inputOverwriteFields = fields);
            return decorator;
        };
        decorator.OutputPickFields = (...fields) => {
            list.push(operationMeta => operationMeta.options.outputPickFields = fields);
            return decorator;
        };
        decorator.OutputOmitFields = (...fields) => {
            list.push(operationMeta => operationMeta.options.outputOmitFields = fields);
            return decorator;
        };
        decorator.OutputOverwriteFields = (fields) => {
            list.push(operationMeta => operationMeta.options.outputOverwriteFields = fields);
            return decorator;
        };
        return decorator;
    }
    CollectionDecorator.Create = Create;
    function Delete(options) {
        const list = [];
        return (0, crud_operation_decorator_js_1.createOperationDecorator)('delete', options, list);
    }
    CollectionDecorator.Delete = Delete;
    function DeleteMany(options) {
        const list = [];
        const decorator = (0, crud_operation_decorator_js_1.createOperationDecorator)('deleteMany', options, list);
        decorator.Filter = (field, operators, notes) => {
            if (typeof operators === 'string')
                operators = operators.split(/\s*[,| ]\s*/)
                    .filter(s => s);
            list.push(operationMeta => {
                operationMeta.options.filters = operationMeta.options.filters || [];
                operationMeta.options.filters.push((0, index_js_1.omitUndefined)({ field, operators, notes }));
            });
            return decorator;
        };
        return decorator;
    }
    CollectionDecorator.DeleteMany = DeleteMany;
    function Get(options) {
        const list = [];
        const decorator = (0, crud_operation_decorator_js_1.createOperationDecorator)('get', options, list);
        decorator.OutputPickFields = (...fields) => {
            list.push(operationMeta => operationMeta.options.outputPickFields = fields);
            return decorator;
        };
        decorator.OutputOmitFields = (...fields) => {
            list.push(operationMeta => operationMeta.options.outputOmitFields = fields);
            return decorator;
        };
        decorator.OutputOverwriteFields = (fields) => {
            list.push(operationMeta => operationMeta.options.outputOverwriteFields = fields);
            return decorator;
        };
        return decorator;
    }
    CollectionDecorator.Get = Get;
    function FindMany(options) {
        const list = [];
        const decorator = (0, crud_operation_decorator_js_1.createOperationDecorator)('findMany', options, list);
        decorator.SortFields = (...fields) => {
            list.push(operationMeta => operationMeta.options.sortFields = fields);
            return decorator;
        };
        decorator.DefaultSort = (...fields) => {
            list.push(operationMeta => operationMeta.options.defaultSort = fields);
            return decorator;
        };
        decorator.Filter = (field, operators, notes) => {
            if (typeof operators === 'string')
                operators = operators.split(/\s*[,| ]\s*/);
            list.push(operationMeta => {
                operationMeta.options.filters = operationMeta.options.filters || [];
                operationMeta.options.filters.push((0, index_js_1.omitUndefined)({ field, operators, notes }));
            });
            return decorator;
        };
        decorator.OutputPickFields = (...fields) => {
            list.push(operationMeta => operationMeta.options.outputPickFields = fields);
            return decorator;
        };
        decorator.OutputOmitFields = (...fields) => {
            list.push(operationMeta => operationMeta.options.outputOmitFields = fields);
            return decorator;
        };
        decorator.OutputOverwriteFields = (fields) => {
            list.push(operationMeta => operationMeta.options.outputOverwriteFields = fields);
            return decorator;
        };
        return decorator;
    }
    CollectionDecorator.FindMany = FindMany;
})(CollectionDecorator || (exports.CollectionDecorator = CollectionDecorator = {}));
/*
 * Update PropertyDecorator
 */
(function (CollectionDecorator) {
    function Update(options) {
        const list = [];
        const decorator = (0, crud_operation_decorator_js_1.createOperationDecorator)('update', options, list);
        decorator.InputMaxContentSize = (sizeInBytes) => {
            list.push(operationMeta => operationMeta.options.inputMaxContentSize = sizeInBytes);
            return decorator;
        };
        decorator.InputPickFields = (...fields) => {
            list.push(operationMeta => operationMeta.options.inputPickFields = fields);
            return decorator;
        };
        decorator.InputOmitFields = (...fields) => {
            list.push(operationMeta => operationMeta.options.inputOmitFields = fields);
            return decorator;
        };
        decorator.InputOverwriteFields = (fields) => {
            list.push(operationMeta => operationMeta.options.inputOverwriteFields = fields);
            return decorator;
        };
        decorator.OutputPickFields = (...fields) => {
            list.push(operationMeta => operationMeta.options.outputPickFields = fields);
            return decorator;
        };
        decorator.OutputOmitFields = (...fields) => {
            list.push(operationMeta => operationMeta.options.outputOmitFields = fields);
            return decorator;
        };
        decorator.OutputOverwriteFields = (fields) => {
            list.push(operationMeta => operationMeta.options.outputOverwriteFields = fields);
            return decorator;
        };
        return decorator;
    }
    CollectionDecorator.Update = Update;
})(CollectionDecorator || (exports.CollectionDecorator = CollectionDecorator = {}));
/*
 * UpdateMany PropertyDecorator
 */
(function (CollectionDecorator) {
    function UpdateMany(arg0) {
        const list = [];
        const options = typeof arg0 === 'string' ? { description: arg0 } : { ...arg0 };
        const decorator = (0, crud_operation_decorator_js_1.createOperationDecorator)('updateMany', options, list);
        decorator.InputMaxContentSize = (sizeInBytes) => {
            list.push(operationMeta => operationMeta.options.inputMaxContentSize = sizeInBytes);
            return decorator;
        };
        decorator.InputPickFields = (...fields) => {
            list.push(operationMeta => operationMeta.options.inputPickFields = fields);
            return decorator;
        };
        decorator.InputOmitFields = (...fields) => {
            list.push(operationMeta => operationMeta.options.inputOmitFields = fields);
            return decorator;
        };
        decorator.InputOverwriteFields = (fields) => {
            list.push(operationMeta => operationMeta.options.inputOverwriteFields = fields);
            return decorator;
        };
        decorator.Filter = (field, operators, notes) => {
            if (typeof operators === 'string')
                operators = operators.split(/\s*[,| ]\s*/);
            list.push(operationMeta => {
                operationMeta.options.filters = operationMeta.options.filters || [];
                operationMeta.options.filters.push((0, index_js_1.omitUndefined)({ field, operators, notes }));
            });
            return decorator;
        };
        return decorator;
    }
    CollectionDecorator.UpdateMany = UpdateMany;
})(CollectionDecorator || (exports.CollectionDecorator = CollectionDecorator = {}));
