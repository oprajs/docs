"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapException = void 0;
const bad_request_error_js_1 = require("./http-errors/bad-request.error.js");
const failed_dependency_error_js_1 = require("./http-errors/failed-dependency.error.js");
const forbidden_error_js_1 = require("./http-errors/forbidden.error.js");
const internal_server_error_js_1 = require("./http-errors/internal-server.error.js");
const method_not_allowed_error_js_1 = require("./http-errors/method-not-allowed.error.js");
const not_acceptable_error_js_1 = require("./http-errors/not-acceptable.error.js");
const not_found_error_js_1 = require("./http-errors/not-found.error.js");
const unauthorized_error_js_1 = require("./http-errors/unauthorized.error.js");
const unprocessable_entity_error_js_1 = require("./http-errors/unprocessable-entity.error.js");
const opra_exception_js_1 = require("./opra-exception.js");
function wrapException(error) {
    if (error instanceof opra_exception_js_1.OpraException)
        return error;
    let status = 500;
    if (typeof error.status === 'number')
        status = error.status;
    else if (typeof error.getStatus === 'function')
        status = error.getStatus();
    switch (status) {
        case 400:
            return new bad_request_error_js_1.BadRequestError(error);
        case 401:
            return new unauthorized_error_js_1.UnauthorizedError(error);
        case 403:
            return new forbidden_error_js_1.ForbiddenError(error);
        case 404:
            return new not_found_error_js_1.NotFoundError(error);
        case 405:
            return new method_not_allowed_error_js_1.MethodNotAllowedError(error);
        case 406:
            return new not_acceptable_error_js_1.NotAcceptableError(error);
        case 422:
            return new unprocessable_entity_error_js_1.UnprocessableEntityError(error);
        case 424:
            return new failed_dependency_error_js_1.FailedDependencyError(error);
        default:
            return new internal_server_error_js_1.InternalServerError(error);
    }
}
exports.wrapException = wrapException;
