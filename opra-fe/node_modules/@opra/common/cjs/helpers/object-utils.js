"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.omitNullish = exports.omitUndefined = exports.cloneObject = void 0;
const tslib_1 = require("tslib");
const putil_isplainobject_1 = tslib_1.__importDefault(require("putil-isplainobject"));
const putil_merge_1 = tslib_1.__importDefault(require("putil-merge"));
const constants_js_1 = require("../document/constants.js");
function cloneObject(obj, jsonOnly) {
    return (0, putil_merge_1.default)({}, obj, {
        deep: (v) => (0, putil_isplainobject_1.default)(v) && !v[constants_js_1.DATATYPE_METADATA],
        filter: (source, key) => {
            const v = source[key];
            return v != null &&
                !jsonOnly || (typeof v !== 'function' &&
                (typeof v !== 'object' || (0, putil_isplainobject_1.default)(v) || Array.isArray(v)));
        }
    });
}
exports.cloneObject = cloneObject;
function omitUndefined(obj, recursive) {
    if (!(obj && typeof obj === 'object'))
        return obj;
    for (const k of Object.keys(obj)) {
        if (obj[k] === undefined)
            delete obj[k];
        else if (recursive && typeof obj[k] === 'object')
            omitUndefined(obj[k]);
    }
    return obj;
}
exports.omitUndefined = omitUndefined;
function omitNullish(obj, recursive) {
    if (!(obj && typeof obj === 'object'))
        return obj;
    for (const k of Object.keys(obj)) {
        if (obj[k] == null)
            delete obj[k];
        else if (recursive && (0, putil_isplainobject_1.default)(obj[k]))
            omitNullish(obj[k]);
    }
    return obj;
}
exports.omitNullish = omitNullish;
