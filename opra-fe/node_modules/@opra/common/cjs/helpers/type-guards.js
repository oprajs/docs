"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAsyncIterable = exports.isIterable = exports.isURL = exports.isFormData = exports.isBlob = exports.isReadableStream = exports.isWritable = exports.isReadable = exports.isStream = exports.isConstructor = void 0;
function isConstructor(fn) {
    return typeof fn === 'function' && fn.prototype &&
        fn.prototype.constructor === fn &&
        fn.prototype.constructor.name !== 'Function' &&
        fn.prototype.constructor.name !== 'embedded';
}
exports.isConstructor = isConstructor;
function isStream(stream) {
    return stream !== null
        && typeof stream === 'object'
        && typeof stream.pipe === 'function';
}
exports.isStream = isStream;
function isReadable(x) {
    return isStream(x)
        && typeof x._read === 'function'
        && typeof x._readableState === 'object';
}
exports.isReadable = isReadable;
function isWritable(x) {
    return isStream(x)
        && typeof x._write === 'function';
}
exports.isWritable = isWritable;
function isReadableStream(x) {
    return isStream(x)
        && typeof x.getReader === 'function'
        && typeof x.pipeThrough === 'function'
        && typeof x.pipeTo === 'function';
}
exports.isReadableStream = isReadableStream;
function isBlob(x) {
    return x !== null
        && typeof x === 'object'
        && typeof x.size === 'number'
        && typeof x.arrayBuffer === 'function'
        && typeof x.stream === 'function';
}
exports.isBlob = isBlob;
function isFormData(x) {
    return x !== null
        && typeof x.constructor === 'function'
        && x.constructor.name === 'FormData'
        && typeof x.append === 'function'
        && typeof x.getAll === 'function';
}
exports.isFormData = isFormData;
function isURL(x) {
    return x !== null
        && typeof x == 'object'
        && typeof x.host === 'string'
        && typeof x.href === 'string';
}
exports.isURL = isURL;
function isIterable(x) {
    return Symbol.iterator in x;
}
exports.isIterable = isIterable;
function isAsyncIterable(x) {
    return Symbol.asyncIterator in x;
}
exports.isAsyncIterable = isAsyncIterable;
