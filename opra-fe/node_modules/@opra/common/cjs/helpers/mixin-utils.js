"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.inheritPropertyInitializers = exports.mergePrototype = void 0;
function mergePrototype(targetProto, baseProto, filter) {
    for (const k of Object.getOwnPropertyNames(baseProto)) {
        if ((k === 'constructor' || k === '__proto__' || k === 'toJSON' || k === 'toString') ||
            filter && !filter(k))
            continue;
        Object.defineProperty(targetProto, k, Object.getOwnPropertyDescriptor(baseProto, k) ||
            Object.create(null));
    }
}
exports.mergePrototype = mergePrototype;
// noinspection JSUnusedLocalSymbols
function inheritPropertyInitializers(target, clazz, 
// eslint-disable-next-line @typescript-eslint/no-unused-vars
isPropertyInherited = (key) => true) {
    try {
        const tempInstance = new clazz();
        const propertyNames = Object.getOwnPropertyNames(tempInstance);
        propertyNames
            .filter((propertyName) => typeof tempInstance[propertyName] !== 'undefined' &&
            typeof target[propertyName] === 'undefined')
            .filter((propertyName) => isPropertyInherited(propertyName))
            .forEach((propertyName) => {
            target[propertyName] = tempInstance[propertyName];
        });
    }
    catch {
        //
    }
}
exports.inheritPropertyInitializers = inheritPropertyInitializers;
