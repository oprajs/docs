import { AsyncEventEmitter } from 'strict-typed-events';
export class ExecutionContextHost extends AsyncEventEmitter {
    constructor(api, platform, protocol) {
        super();
        this.api = api;
        this.platform = platform;
        this.ws = protocol.ws;
        this.rpc = protocol.rpc;
        if (protocol.http) {
            this.protocol = 'http';
            this.http = {
                platform,
                incoming: protocol.http.incoming,
                outgoing: protocol.http.outgoing,
                switchToContext: () => this
            };
        }
        else if (protocol.ws) {
            this.protocol = 'ws';
            this.ws = protocol.ws;
        }
        else if (protocol.rpc) {
            this.protocol = 'rpc';
            this.rpc = protocol.rpc;
        }
    }
    switchToHttp() {
        if (this.http)
            return this.http;
        throw new TypeError('Not executing in an "Http" context');
    }
    switchToWs() {
        if (this.ws)
            return this.ws;
        throw new TypeError('Not executing in an "WebSocket" context');
    }
    switchToRpc() {
        if (this.rpc)
            return this.rpc;
        throw new TypeError('Not executing in an "RPC" context');
    }
}
