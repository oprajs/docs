"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const common_1 = require("@opra/common");
common_1.I18n.prototype.loadResourceBundle = async function (lang, ns, filePath, deep, overwrite) {
    let obj;
    if ((0, common_1.isUrlString)(filePath)) {
        obj = (await fetch(filePath, { headers: { accept: 'application/json' } })).json();
    }
    else {
        const content = fs_1.default.readFileSync(filePath, 'utf8');
        obj = JSON.parse(content);
    }
    this.addResourceBundle(lang, ns, obj, deep, overwrite);
};
common_1.I18n.prototype.loadResourceDir = async function (dirnames, deep, overwrite) {
    for (const dirname of Array.isArray(dirnames) ? dirnames : [dirnames]) {
        /* istanbul ignore next */
        if (!(fs_1.default.existsSync(dirname)))
            continue;
        const languageDirs = fs_1.default.readdirSync(dirname);
        for (const lang of languageDirs) {
            const langDir = path_1.default.join(dirname, lang);
            if ((fs_1.default.statSync(langDir)).isDirectory()) {
                const nsDirs = fs_1.default.readdirSync(langDir);
                for (const nsfile of nsDirs) {
                    const nsFilePath = path_1.default.join(langDir, nsfile);
                    const ext = path_1.default.extname(nsfile);
                    if (ext === '.json' && (fs_1.default.statSync(nsFilePath)).isFile()) {
                        const ns = path_1.default.basename(nsfile, ext);
                        await this.loadResourceBundle(lang, ns, nsFilePath, deep, overwrite);
                    }
                }
            }
        }
    }
};
