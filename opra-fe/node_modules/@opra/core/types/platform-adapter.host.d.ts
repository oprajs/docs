import './augmentation/18n.augmentation.js';
import { AsyncEventEmitter } from 'strict-typed-events';
import { Action, ApiDocument, CrudOperation, I18n, Resource } from '@opra/common';
import { ExecutionContext } from './execution-context.js';
import { Interceptor } from './interfaces/interceptor.interface.js';
import type { PlatformAdapter, Protocol } from './platform-adapter.js';
import { Logger } from './services/logger.js';
/**
 * @class PlatformAdapterHost
 */
export declare abstract class PlatformAdapterHost extends AsyncEventEmitter implements PlatformAdapter {
    protected _api: ApiDocument;
    protected _controllers: Map<Resource, any>;
    protected _protocol: Protocol;
    protected _platform: string;
    protected _serviceName: string;
    protected _i18n: I18n;
    protected _logger: Logger;
    protected _interceptors: Interceptor[];
    get api(): ApiDocument;
    get platform(): string;
    get protocol(): Protocol;
    get serviceName(): string;
    get i18n(): I18n;
    close(): Promise<void>;
    /**
     * Initializes the adapter
     */
    protected init(api: ApiDocument, options?: PlatformAdapter.Options): Promise<void>;
    getController(resource: Resource | string): Promise<any>;
    getActionHandler(resource: Resource | string, name: string): Promise<{
        endpoint: Action;
        controller: any;
        handler: Function;
    }>;
    getOperationHandler(resource: Resource | string, name: string): Promise<{
        endpoint: CrudOperation;
        controller: any;
        handler: Function;
    }>;
    protected _createI18n(options?: PlatformAdapter.I18nOptions): Promise<I18n>;
    abstract handleExecution(executionContext: ExecutionContext): Promise<void>;
}
