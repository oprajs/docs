import { AsyncEventEmitter } from 'strict-typed-events';
import type { ApiDocument } from '@opra/common';
import type { ExecutionContext, HttpMessageContext, RpcMessageContext, WsMessageContext } from './execution-context.js';
import type { HttpServerRequest } from './http/http-server-request.js';
import type { HttpServerResponse } from './http/http-server-response.js';
import { Protocol } from './platform-adapter.js';
export declare class ExecutionContextHost extends AsyncEventEmitter implements ExecutionContext {
    readonly api: ApiDocument;
    readonly platform: string;
    readonly protocol: Protocol;
    readonly http?: HttpMessageContext;
    readonly ws?: WsMessageContext;
    readonly rpc?: RpcMessageContext;
    constructor(api: ApiDocument, platform: string, protocol: {
        http?: {
            incoming: HttpServerRequest;
            outgoing: HttpServerResponse;
        };
        ws?: WsMessageContext;
        rpc?: RpcMessageContext;
    });
    switchToHttp(): HttpMessageContext;
    switchToWs(): WsMessageContext;
    switchToRpc(): RpcMessageContext;
}
