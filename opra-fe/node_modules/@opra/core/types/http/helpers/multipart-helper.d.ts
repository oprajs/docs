/// <reference types="node" />
import { EventEmitter } from 'events';
import formidable from 'formidable';
import type IncomingForm from 'formidable/Formidable.js';
import { HttpIncomingMessage } from '../impl/http-incoming-message.host.js';
export type MultipartFile = formidable.File;
export type MultipartItem = {
    field: string;
    value?: string;
    file?: MultipartFile;
};
export declare class MultipartIterator extends EventEmitter {
    protected _cancelled: boolean;
    protected _form: IncomingForm;
    protected _items: MultipartItem[];
    protected _stack: MultipartItem[];
    protected constructor(options?: formidable.Options);
    get items(): MultipartItem[];
    getNext(): Promise<MultipartItem | undefined>;
    getAll(): Promise<MultipartItem[]>;
    cancel(): void;
    resume(): void;
    pause(): void;
    deleteFiles(): Promise<PromiseSettledResult<any>[]>;
    static create(incoming: HttpIncomingMessage, options?: formidable.Options): Promise<MultipartIterator>;
}
