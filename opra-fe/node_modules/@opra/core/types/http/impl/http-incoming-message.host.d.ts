/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import http, { IncomingHttpHeaders } from 'http';
import { Duplex, Readable } from 'stream';
import { HTTPParserJS } from '@browsery/http-parser';
export declare const CRLF: Buffer;
export declare const kHeaders: unique symbol;
export declare const kHeadersDistinct: unique symbol;
export declare const kTrailers: unique symbol;
export declare const kTrailersDistinct: unique symbol;
export interface HttpIncomingMessage extends Pick<http.IncomingMessage, 'httpVersion' | 'httpVersionMajor' | 'httpVersionMinor' | 'complete' | 'headers' | 'trailers' | 'rawHeaders' | 'rawTrailers' | 'method' | 'url'>, Readable {
}
export declare namespace HttpIncomingMessageHost {
    interface Initiator {
        httpVersionMajor?: number;
        httpVersionMinor?: number;
        method?: string;
        url?: string;
        headers?: Record<string, any> | string[];
        trailers?: Record<string, any> | string[];
        body?: any;
        ip?: string;
        ips?: string[];
    }
}
/**
 *
 * @class HttpIncomingMessageHost
 */
export declare class HttpIncomingMessageHost extends Duplex implements HttpIncomingMessage {
    protected [kHeaders]?: IncomingHttpHeaders;
    protected [kHeadersDistinct]?: NodeJS.Dict<string[]>;
    protected [kTrailers]?: NodeJS.Dict<string>;
    protected [kTrailersDistinct]?: NodeJS.Dict<string[]>;
    protected _httpParser: HTTPParserJS | undefined;
    protected _readStream?: Readable;
    httpVersionMajor: number;
    httpVersionMinor: number;
    method: string;
    url: string;
    rawHeaders: string[];
    rawTrailers: string[];
    body?: Buffer;
    complete: boolean;
    ip?: string;
    ips?: string[];
    joinDuplicateHeaders: boolean;
    constructor(init?: HttpIncomingMessageHost.Initiator);
    get httpVersion(): string;
    get headers(): IncomingHttpHeaders;
    set headers(headers: IncomingHttpHeaders);
    get headersDistinct(): NodeJS.Dict<string[]>;
    get trailers(): NodeJS.Dict<string>;
    set trailers(trailers: NodeJS.Dict<string>);
    get trailersDistinct(): NodeJS.Dict<string[]>;
    _read(size: number): void;
    _write(chunk: any, encoding: BufferEncoding, callback: (error?: Error | null) => void): void;
    static from(iterable: string | Iterable<any> | AsyncIterable<any> | HttpIncomingMessageHost.Initiator): HttpIncomingMessageHost;
    static fromAsync(iterable: string | Iterable<any> | AsyncIterable<any> | HttpIncomingMessageHost.Initiator): Promise<HttpIncomingMessageHost>;
}
